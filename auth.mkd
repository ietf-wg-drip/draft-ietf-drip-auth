---
coding: utf-8

title: DRIP Authentication Formats
abbrev: auth-formats
docname: draft-ietf-drip-auth-00
category: info

ipr: trust200902
area: Internet
wg: DRIP Working Group
kw: Internet-Draft
cat: std

stand_alone: yes
pi: [toc, sortrefs, symrefs, comments]

author:

-   ins: A. Wiethuechter
    name: Adam Wiethuechter
    org: AX Enterprize, LLC
    street: 4947 Commercial Drive
    city: Yorkville
    region: NY
    code: 13495
    country: USA
    email: adam.wiethuechter@axenterprize.com
-   ins: S. Card
    name: Stuart Card
    org: AX Enterprize, LLC
    street: 4947 Commercial Drive
    city: Yorkville
    region: NY
    code: 13495
    country: USA
    email: stu.card@axenterprize.com
-   ins: R. Moskowitz
    name: Robert Moskowitz
    org: HTT Consulting
    street: ""
    city: Oak Park
    region: MI
    code: 48237
    country: USA
    email: rgm@labs.htt-consult.com

normative:
    F3411-19:
        title: "Standard Specification for Remote ID and Tracking"
        author:
        org: ASTM International
        date: 2020-02

informative:
    drip-requirements: I-D.ietf-drip-reqs
    drip-rid: I-D.ietf-drip-uas-rid
    identity-claims: I-D.wiethuechter-drip-identity-claims

--- abstract

This document describes how to include trust into the ASTM Remote ID specification defined in ASTM F3411-19 under a Broadcast Remote ID (RID) scenario. It defines a few different message schemes (based on the Authentication Message) that can be used to assure past messages sent by a UA and also act as an assurance for UA trustworthiness in the absence of Internet connectivity at the receiving node.

--- middle

# Introduction

UA Systems (UAS) are usually in a volatile environment when it comes to communication. UA are generally small with little computational (or flying)  horsepower to carry standard communication equipment. This limits  the mediums of communication to few viable options.

Observer systems (e.g. smartphones and tablets) place further constraints on the communication options. The Remote ID Broadcast messages MUST be available to applications on these platforms without modifying the devices.

The ASTM standard {{F3411-19}} focuses on two ways of communicating to a UAS for RID: Broadcast and Network.

This document will focus on adding trust to Broadcast RID in the current (and an expanded) Authentication Message format.

## DRIP Requirements Addressed

The following {{?drip-requirements}} will be addressed:

GEN 1: Provable Ownership

: This will be addressed using the Certificate Message type ({{drip-certificate}}).

GEN 2: Provable Binding

: This requirement is addressed using the Wrapped ASTM Message ({{wrapped-astm-messages}}), Manifest Message ({{manifests}}) and Message Pack Signature ({{message-pack-signature}}) types.

GEN 3: Provable Registration

: This requirement is addressed using the Certificate Message type ({{drip-certificate}}).

# Terminology {#terminology}

## Required Terminology

The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in BCP 14 {{!RFC2119}} {{!RFC8174}} when, and only when, they appear in all capitals, as shown here.

## Definitions

See {{?drip-requirements}} for common DRIP terms.

Aircraft:

: In this document whenever the word Aircraft is used it is referring to an Unmanned Aircraft (UA) not a Manned Aircraft.

# Background

## Problem Space and Focus

The current standard for Remote ID (RID) does not, in any meaningful capacity, address the concerns of trust in the UA space with communication in the Broadcast RID environment. This is a requirement that will need to be addressed eventually for various different parties that have a stake in the UA industry.

The following subsections will provide a high level reference to the ASTM standard for Authentication Messages and how their current limitations effect trust in the Broadcast RID environment.

## ASTM Authentication Message

{:fig: artwork-align="center"}
~~~~
Page 0:
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+---------------+-----------------------------------------------+
|  Auth Header  |                                               |
+---------------+  ASTM Authentication Headers  +---------------+
|                                               |               |
+-----------------------------------------------+               |
|                                                               |
|                                                               |
|                                                               |
|                Authentication Data / Signature                |
|                                                               |
|                                                               |
|                                                               |
+---------------------------------------------------------------+

Page 1 - 4:
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+---------------+-----------------------------------------------+
|  Auth Header  |                                               |
+---------------+                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                Authentication Data / Signature                |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
+---------------------------------------------------------------+

Auth Header (1 byte):
    Contains Authentication Type (AuthType) and Page Number. For
    DRIP Authentication AuthType is a value of 0x5.

ASTM Authentication Headers: (6 bytes)
    Contains other header information for the Authentication
    Message from ASTM UAS RID Standard.

Authentication Data / Signature: (109 bytes: 17+23*4)
    Opaque authentication data.
~~~~
{:fig #astm-auth title="Standard ASTM Authentication Message format"}

The above diagram is the format defined by ASTM {{F3411-19}} that is the frame which everything this document fits into. The specific details of the ASTM headers are abstracted away as they are not necessarily required for this document.

There is a 25th byte exclude in the diagrams that comes before the Auth Header. This is the ASTM Header and consists of the Protocol Version and Message Type of the given message frame/page.

# DRIP Authentication Framing Formats

Currently the ASTM AuthType of 0x5 should be used to denote DRIP based Authentication. The max page count of the Authentication Message is increased to 10, instead of being capped at 5.

To keep consistent formatting across the different mediums (Bluetooth 4, Bluetooth 5 and Wifi NaN) and their independent restrictions the authentication data being sent is REQUIRED to fit within the first 9 pages of the Authentication Message. The final (10th) page of the message is reserved exclusively for Forward Error Correction bytes and is only present on Bluetooth 4.

## DRIP General Frame

~~~~
Page 0:
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+---------------+-----------------------------------------------+
|  Auth Header  |                                               |
+---------------+  ASTM Authentication Headers  +---------------+
|                                               |  DRIP Header  |
+-----------------------------------------------+---------------+
|                                                               |
|                                                               |
|                                                               |
|                    DRIP Authentication Data                   |
|                                                               |
|                                                               |
|                                                               |
+---------------------------------------------------------------+

Page 1 - Page N-1:
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+---------------+-----------------------------------------------+
|  Auth Header  |                                               |
+---------------+                                               |
|                                                               |
|                                                               |
|                                                               |
|                    DRIP Authentication Data                   |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
+---------------------------------------------------------------+

Page N:
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+---------------+-----------------------------------------------+
|  Auth Header  |                                               |
+---------------+                                               |
|                                                               |
|                                                               |
|                                                               |
|                    Forward Error Correction                   |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
+---------------------------------------------------------------+

DRIP Header (1 byte):
       7     6     5     4     3     2     1     0
    +-----+-----+-----+-----+-----+-----+-----+-----+
    | FEC |              DRIP AuthType              |
    +-----+-----+-----+-----+-----+-----+-----+-----+

    FEC (1 bit):
        Enabled [1] or Disabled [0]. Signals if Page N is
        filled with XOR FEC.

    DRIP AuthType (7 bits):
        DRIP AuthType                        Values
        -------------                        ------
        0 Wrapped ASTM Message(s)            0
        1 Wrapped ASTM Message(s)            1
        2 Wrapped ASTM Message(s)            2
        3 Wrapped ASTM Message(s)            3
        4 Wrapped ASTM Message(s)            4
        5 Wrapped ASTM Message(s)            5
        8 Byte Manifest                      6
        4 Byte Manifest                      7
        Reserved (Wrapped Messages)          8-15
        Certificate: Registry on Aircraft    16
        Reserved (Certificates)              17-31
        Private Use                          32-63
        Reserved                             64-111
        Experimental Use                     112-127

DRIP Authentication Data (200 bytes):
    DRIP Authentication data. 0 to 200 bytes.

Forward Error Correction (23 bytes):
    Optional and signaled using DRIP Header. Always last
    Authentication page.
~~~~
{:fig #drip-general title="DRIP General Frame Format"}

### DRIP Header

The DRIP Header is used to signal what kind of Authentication under DRIP that the message is using and consists of two fields.

#### Forward Error Correction (Bit 8)

The Most Significant Bit is used to signal if FEC is present in the final page of the Authentication Message. It MUST be set to 1 if FEC is being used. This is only enabled under Bluetooth 4 and MUST be set to 0 on Bluetooth 5 or Wifi NaN.

#### DRIP AuthType (Bits 1-7)

The lower 7 bits are used as the DRIP AuthType field denoting what Authentication type is being used. There are 5 major areas carved out of the DRIP AuthType defined by the following bitmaps:

~~~~
000 xxxx (0x00-0x0F): Wrapped Messages (16)
001 xxxx (0x10-0x1F): Certificates (16)
01x xxxx (0x20-0x3F): Private Use (32)
1xx xxxx (0x40-0x6F): Reserved (48)
111 xxxx (0x70-0x7F): Experimental Use (16)
~~~~
{:fig #header-bitmaps title="DRIP Header Bitmasks"}

### DRIP Authentication Data

This field has a maximum size of 200 bytes. If the data is less than the max and a page is only partially filled then the rest of the partially filled page must be null padded.

This section is generally filled with either the Wrapper Frame ({{drip-wrapper-frame}}) or the Attestation Frame ({{drip-attestation-frame}}).

### Forward Error Correction

To help Bluetooth (specifically Bluetooth 4) achieve the goal of reliable receipt of paged messages a Forward Error Correction (FEC) scheme is introduced and MUST be used for Legacy Advertising (Bluetooth 4) and MUST NOT be used for Extended Advertising (Bluetooth 5, Wifi NaN) under DRIP.

#### Encoding

A compliant implementation of this standard MUST use XOR for the FEC. When generating the parity the first byte of every Authentication Page MUST be exclude from the XOR operation. For pages 1 through N this leaves the data portion of the page while page 0 will include a number of headers along with 17 bytes of data.

To generate the parity a simple XOR operation using the previous and current page is used. For page 0, a 23 byte null pad is used for the previous page. The resulting 23 bytes of parity is appended in one full page (always the last) allowing for recovery when any single page is lost in transmission.

#### Decoding

Due to the nature of Bluetooth 4 and the existing ASTM paging structure an optimization can be used. If a Bluetooth frame fails its CRC check, then the frame is dropped without notification to the upper protocol layers. From the Remote ID perspective this means the loss of a complete frame/message/page. In Authentication Messages, each page is already numbered so the loss of a page allows  the receiving application to build a "dummy" page filling the Authentication Data field (and ASTM Authentication Headers fields if page 0) with nulls.

Using the same methods as encoding, an XOR operation is used between the previous and current page (a 23 byte null pad is used when page 0 is the current page). The resulting 23 bytes is the data of the missing page.

If page 0 is being reconstructed an additional check of the Page Count, to check against how many pages are actually present, MUST be performed for sanity. An additional check on the Data Length field can also be performed, but is not required.

#### Limitations & Recommendations

If more than one page is lost (>1/5 for 5 page messages, >1/10 for 10 page messages) than the error rate of the link is already beyond saving and the application has more issues to deal with.

In theory under Bluetooth 4 up to 15 pages Authentication could be sent (9 pages reserved to Authentication and 6 pages reserved for Forward Error Correction). It is currently recommended however for a max of 10 pages total.

## DRIP Wrapper Frame

This format MUST be encapsulated by the General Frame ({{drip-general-frame}}) and reside in its data field ({{drip-authentication-data}}).

Typically the DRIP Header is set in the range of 0x00 through 0x0F (FEC disabled) or 0x80 through 0x8F (FEC enabled).

~~~~
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+---------------+---------------+---------------+---------------+
|                                                               |
|                        UA Hierarchical                        |
|                       Host Identity Tag                       |
|                                                               |
+---------------+---------------+---------------+---------------+
|                         Trust Timestamp                       |
+---------------+---------------+---------------+---------------+
|                                                               |
.                                                               .
.                      Authentication Data                      .
.                                                               .
|                                                               |
+---------------+---------------+---------------+---------------+
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                            Signature                          |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
+---------------+---------------+---------------+---------------+

UA Hierarchial Host Identity Tag (16 bytes):
    The UAs HHIT in byte form. Hashed from the EdDSA25519
    public key.

Trust Timestamp (4 bytes):
    Timestamp denoting current time plus an offset to trust
    message to.

Authentication Data (116 bytes):
    Opaque authentication data using DRIP format specified in
    the DRIP Header. 0 to 116 bytes.

Signature (64 bytes):
    Signature over preceding fields using the EdDSA25519
    keypair of the UA.
~~~~
{:fig #drip-wrapper title="DRIP Wrapper Frame Format"}

### UA Hierarchical Host Identity Tag

To avoid needing the UAs HHIT via the ASTM Basic ID in a detached fashion the 16 byte HHIT of the UA is included in the wrapper frame.

The HHIT for the UA (and other entities in the RID and greater UTM system under DRIP) is an enhancement of the Host Identity Tag (HIT) {{?RFC7401}} introducing hierarchy (and how they are used in UAS RID) as defined in {{?drip-rid}}.

### Trust Timestamp

The Trust Timestamp is of the format defined in {{F3411-19}}. That is a UNIX timestamp offset by 01/01/2019 00:00:00. An additional offset is then added to push the timestamp a short time into the future to avoid replay attacks.

When wrapping a Vector (Position/Location) Message the payload WILL contain (by ASTM rules) constantly changing data, this includes its own timestamp. This timestamp is only 2 bytes, which is easily attacked and only expresses the 1/10th of seconds since the last hour.

Other ASTM message types, such as Basic ID and Self-ID are static messages with no changing data. To protect a replay of these signed messages the Trust Timestamp is the field during signing to be guaranteed to change.

The offset used against the UNIX timestamp is not defined in this document. Best practices to identify a acceptable offset should be used taking into consideration the UA environment, and propagation characteristics of the messages being sent.

### Wrapped Authentication Data

This field has a maximum of 116 bytes in length.

#### Wrapped ASTM Message Formats

When wrapping any ASTM Messages and filling the Wrapped Authentication Data field under DRIP the messages MUST be in Message Type order as defined by ASTM. All message types except Authentication (0x2) and Message Pack (0xF) are allowed.

##### 0 Wrapped ASTM Message(s) {#message-pack-signature}

This payload type MUST only be used under Extended Advertisement (Bluetooth 5.X and Wifi NaN).

The Wrapped Authentication Data is the concatenation of all messages in the Message Pack (excluding Authentication) in Message Type order. No actual data payload is present in this format as the data is found outside the Authentication Message in the same Message Pack.

The DRIP Header is set to 0x00 (0).

##### 1 to 4 Wrapped ASTM Message(s) {#wrapped-astm-messages}

This payload type can be used on either Legacy or Extended Advertisements.

The DRIP Header is set to 0x81-0x84 (129-134) when using Legacy Advertisements (FEC is enabled) and 0x01-0x04 (1-4) when using Extended Advertisements (FEC is disabled).

##### 5 Wrapped ASTM Message(s) {#legacy-message-pack}

Editors Note: This payload type does not currently fit in the 116 byte limit of the Wrapper Frame. If the ASTM relaxes the Max Page Count limit for Legacy Advertisements to use all 15 pages then this is possible.

This payload type MUST only be used on Legacy Advertisements (Bluetooth 4.X). It requires 11 pages to complete.

The DRIP Header is set to 0x85 (133).

This payload type allows in Legacy Advertisements to have a pseudo-Message Pack like what is found in Extended Advertisements.

##### Limitations

When wrapping a single ASTM Message the 25 byte payload actually causes an inefficiency in the framing format, create a whole page unused except for a single byte. This can be optimized by removing a single byte out of the wrapped message but creates an issue on the receiver of knowing which byte was removed.

When sending a Location Message (Message Type 0x1) a single byte can be removed at the end of the message as it is currently unused. Many other messages in the ASTM Message set however do not have this ability. The first byte can not be removed as it is the key to know how to decode the message.

#### Manifests

Manifests fill the Wrapped Authentication Data field with hashes of previously send messages.

By hashing previously sent messages and signing them we gain trust in UAs previous reports. An observer who has been listening for any considerable length of time can hash received messages and cross check against listed hashes.

##### Hash Algorithm and Operation

The hash algorithm used for the Manifest Message is the same hash algorithm used in creation of the HHIT that is signing the Manifest.

A standard HHIT would be using cSHAKE128 from {{!NIST.SP.800-185}}. With cSHAKE128, the hash is computed as follows:

~~~~
cSHAKE128(MAC Address|Message, 8*H-Len, "", "RemoteID Auth Hash")
~~~~

The message MAC Address of the transmitter is prepended to the message, as the MAC Address is the only information that links UA messages from a specific UA.

Editors Note: It should be noted that for Bluetooth mediums this is valid - however Wifi NaN does not give the receiver device the transmitters MAC Address - making this impossible. Either MAC Address should be removed entirely or something different be used in its place to link to a given UA. Thanks Soren Friis for pointing this out.

##### 8 Byte

~~~~
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+---------------+---------------+---------------+---------------+
|                   Hash of Previous Manifest                   |
|                                                               |
+---------------+---------------+---------------+---------------+
|                    Hash of Current Manifest                   |
|                                                               |
+---------------+---------------+---------------+---------------+
|                         Message Hash 1                        |
|                                                               |
+---------------+---------------+---------------+---------------+
|                         Message Hash 2                        |
|                                                               |
+---------------+---------------+---------------+---------------+
.                                                               .
.                                                               .
.                                                               .
+---------------+---------------+---------------+---------------+
|                        Message Hash 12                        |
|                                                               |
+---------------+---------------+---------------+---------------+

DRIP Header:
    With FEC: 0x87 [135] (RECOMMENDED)
    Without FEC: 0x07 [7]

Hash of Previous Manifest: (8 bytes)
    A hash of the previously sent Authentication message.

Hash of Current Manifest: (8 bytes)
    A hash of the current Authentication message.

Message Hash: (8 bytes)
    A hash of a previously sent message. 12 max.
~~~~
{:fig #8-byte-manifest title="4 Byte Manifest"}

##### 4 Byte

~~~~
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+---------------+---------------+---------------+---------------+
|                   Hash of Previous Manifest                   |
+---------------+---------------+---------------+---------------+
|                    Hash of Current Manifest                   |
+---------------+---------------+---------------+---------------+
|                         Message Hash 1                        |
+---------------+---------------+---------------+---------------+
|                         Message Hash 2                        |
+---------------+---------------+---------------+---------------+
.                                                               .
.                                                               .
.                                                               .
+---------------+---------------+---------------+---------------+
|                        Message Hash 27                        |
+---------------+---------------+---------------+---------------+

DRIP Header:
    With FEC: 0x86 [132] (RECOMMENDED)
    Without FEC: 0x06 [6]

Hash of Previous Manifest: (4 bytes)
    A hash of the previously sent Authentication message.

Hash of Current Manifest: (4 bytes)
    A hash of the current Authentication message.

Message Hash: (4 bytes)
    A hash of a previously sent message. 27 max.
~~~~
{:fig #4-byte-manifest title="4 Byte Manifest"}

##### Pseudo-Blockchain Hashes

Two special hashes are included in all Manifest messages; a previous manifest hash, which links to the previous manifest message, as well as a current manifest hash. This gives a pseudo-blockchain provenance to the manifest message that could be traced back if the observer was present for extended periods of time.

Creation:

: During creation and signing of this message format this field MUST be set to 0. So the signature will be based on this field being 0, as well as its own hash. It is an open question of if we compute the hash, then sign or sign then compute.

Cycling:

: There a few different ways to cycle this message. We can "roll up" the hash of 'current' to 'previous' when needed or to completely recompute the hash. This mostly depends on the previous note.

##### Manifest Limitation

A potential limitation to this format is dwell time of the UA. If the UA is not sticking to a general area then most likely the Observer will not obtain many (if not all) of the messages in the manifest. Without the original messages received no verification can be done. Examples of such scenarios include delivery or survey UA.

### Wrapper Signature

The wrapper signature is generated using the private key half of the the UAs Host Identity (HI) and is done over all preceding data. ASTM/DRIP Headers are exclude from this operation only information within the Wrapper Fame ({{drip-wrapper-frame}}) is signed.

## DRIP Attestation Frame

This format MUST be encapsulated by the General Frame ({{drip-general-frame}}) and reside in its data field ({{drip-authentication-data}}).

This format is typically used to form a complete certificate using attestation data from a Registry defined in {{?identity-claims}}. The DRIP Header is normally in the range of 0x10 through 0x1F (FEC disable) or 0x90 through 0x9F (FEC enabled).

~~~~
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+---------------+---------------+---------------+---------------+
|                                                               |
.                                                               .
.                        Attestation Data                       .
.                                                               .
|                                                               |
+---------------+---------------+---------------+---------------+
|                      Expiration Timestamp                     |
+---------------+---------------+---------------+---------------+
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                            Signature                          |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
+---------------+---------------+---------------+---------------+

Attestation Data: (up to 132 bytes):
    Data the UA asserts claim to.
    Up to 132 bytes in length.

Expiration Timestamp (4 bytes):
    Generated by the UA to protect against replay attacks.

Signature (64 bytes):
    Signature over preceding fields using the EdDSA25519
    keypair of the UA.
~~~~
{:fig #attestation-format title="DRIP Attestation Format"}

### Attestation Data

Any data up to 132 bytes in length that the UA wishes to assert truth to.

#### DRIP Certificate

This payload type can be used in either Legacy or Extended Advertising. It is used to grant the ability to authenticate UA Remote ID when the receiving device of the observer (e.g. a smartphone with a dedicated RID application) has no Internet service (e.g. LTE signal).

The DRIP Header is set to 0x90 (144) when used for Legacy Advertisements and 0x10 (16) for Extended Advertisements.

The Attestation Data field is filled with the Attestation: Registry on Aircraft (Section 3.2.2 Attestation: X on Y (Offline Form) from {{?identity-claims}}). This is binding claim between the Registry and the Aircraft, asserting the relationship between the two entities. It also provides the UA Host Identity to allow signature verification of messages signed by the UA. Also included in its structure is the HHIT of the Registry to check the local shortlist of Registries that the Observer device trusts (mapping HHITs to HIs).

More details about this Attestation and other certificates and the provisioning process can be found in {{?identity-claims}}.

### Expiration Timestamp

Generated by the UA during the creation of the Authentication message. It is set a short time into the future to protect against replay attacks of this DRIP format.

It shares the same format as the Trust Timestamp ({{trust-timestamp}}).

### Attestation Signature

Performed by the UA using the onboard keypair which matches the HHIT in the Basic ID Message (0x0).

# Transport Methods & Recommendations

## Legacy Advertisements (Bluetooth 4.X)

With Legacy Advertisements the goal is to attempt to bring reliable receipt of the paged Authentication Message. Forward Error Correction ({{forward-error-correction}}) MUST be enabled when using Legacy Advertising methods (such as Bluetooth 4.X).

Under ASTM Bluetooth 4.X rules, transmission of dynamic messages are at least every 1 second while static messages (which is what Authentication is classified under) are sent at least every 3 seconds.

Under DRIP the Certificate Message MUST be transmitted to properly meet the GEN 1 and GEN 3 requirement.

The ASTM Message Wrapper and Manifest both satisfy the GEN 2 requirement. At least one MUST be implemented to comply with the GEN 2 requirement.

A single Manifest can carry at most (using the full 10 page limit and 8 byte hashes) 12 unique hashes of previously sent messages (of any type). This results in a total of 22 (12 + 10) frames of Bluetooth data being transmitted over Bluetooth.

In comparison the Message Wrapper sends 6 pages (each a single frame) for each  wrapped message. For backwards compatibility the implementation should also send the standard ASTM message that was wrapped for non-DRIP compliant receivers to obtain. This method results in 84 total Bluetooth frames (12 + (12 * 6)) sent.

The question of which is better suited is up to the implementation.

## Extended Advertisements (Bluetooth 5.X and Wifi NaN)

Under the ASTM specification, Bluetooth 5 or Wifi NaN transport of Remote ID is to use the Message Pack (Type 0xF) format for all transmissions. Under Message Pack all messages are sent together (in Message Type order) in a single Bluetooth frame (up to 9 single frame equivalent messages). Message Packs are required by ASTM to be sent at a rate of 1 per second (like dynamic messages).

Without any fragmentation or loss of pages with transmission Forward Error Correction ({{forward-error-correction}}) MUST NOT be used as it is impractical.

# ASTM Considerations

- Increase Authentication Max Page Count from 5 to 10. Legacy Advertising can use all 10 while Extended Advertising has a maximum of 9 due to Bluetooth 5 limitations.
- Allocate Authentication Type 0x5 for DRIP from ASTM AuthType field.

# IANA Considerations

This document does not require any actions by IANA.

# Security Considerations

TODO

(Ed. Note: Hash lengths (length vs strength/collision rate); replay attacks with timestamps; static Cra (issue but nulled if UA signing other stuff dynamically meaning signatures will fail as HI won't match - this is probably a deeper discussion topic for provisioning security considerations when we get to there))

# Acknowledgments

Ryan Quigley and James Mussi of AX Enterprize, LLC for early prototyping to find holes in the draft specifications.

# Appendix A: Thoughts on ASTM Authentication Message

The format standardized by the ASTM is designed with a few major considerations in mind, which the authors of this document feel put significant limitations on the expansion of the standard.

The primary consideration (in this context) is the use of the Bluetooth 5.X Extended Frame format. This method allows for a 255 byte payload to be sent in what the ASTM refers to as a "Message Pack".

The idea is to include up to five standard ASTM Broadcast RID messages (each of which are 25 bytes) plus a single authentication message (5 pages of 25 bytes each) in the Message Pack. The reasoning is then the Authentication Message is for the entire Message Pack.

The authors have no issues with this proposed approach; this is a valid format to use for the Authentication Message provided by the ASTM. However, by limiting the Authentication Message to ONLY five pages in the standard it ignores the possibility of other formatting options to be created and used.

Another issue with this format, not fully addressed in this document is fragmentation. Under Bluetooth 4.X, each page is sent separately which can result in lose of pages on the receiver. This is disastrous as the loss of even a single page means any signature is incomplete.

With the current limitation of 5 pages, Forward Error Correction (FEC) is nearly impossible without sacrificing the amount of data sent. More pages would allow FEC to be performed on the Authentication Message pages so loss of pages can be mitigated.

All these problems are further amplified by the speed at which UA fly and the Observer's position to receive transmissions. There is no guarantee that the Observer will receive all the pages of even a 5 page Authentication Message in the time it takes a UA to traverse across their line of sight. Worse still is that is not including other UA in the area, which congests the spectrum and could cause further confusion attempting to collate messages from various UA. This specific problem is out of scope for this document and our solutions in general, but should be noted as a design consideration.
