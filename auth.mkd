---
coding: utf-8

title: DRIP Entity Tag Authentication Formats & Protocols for Broadcast Remote ID
abbrev: DRIP Auth Formats
docname: draft-ietf-drip-auth-17
category: info

ipr: trust200902
area: Internet
wg: DRIP Working Group
kw: Internet-Draft
cat: std

stand_alone: yes
pi: [toc, sortrefs, symrefs, comments]

author:

-   ins: A. Wiethuechter (Editor)
    name: Adam Wiethuechter
    org: AX Enterprize, LLC
    street: 4947 Commercial Drive
    city: Yorkville
    region: NY
    code: 13495
    country: USA
    email: adam.wiethuechter@axenterprize.com
-   ins: S. Card
    name: Stuart Card
    org: AX Enterprize, LLC
    street: 4947 Commercial Drive
    city: Yorkville
    region: NY
    code: 13495
    country: USA
    email: stu.card@axenterprize.com
-   ins: R. Moskowitz
    name: Robert Moskowitz
    org: HTT Consulting
    street: ""
    city: Oak Park
    region: MI
    code: 48237
    country: USA
    email: rgm@labs.htt-consult.com

normative:
    RFC9153: # drip-requirements
    drip-arch: I-D.ietf-drip-arch
    F3411:
        title: "F3411-22a: Standard Specification for Remote ID and Tracking"
        author:
        org: ASTM International
        date: 2022-07

informative:
    RFC8126: # iana-considerations
    drip-rid: I-D.ietf-drip-uas-rid
    drip-registries: I-D.ietf-drip-registries
    FAA-14CFR:
        title: Remote Identification of Unmanned Aircraft
        author:
        org: United States Federal Aviation Administration (FAA)
        target: https://www.govinfo.gov/content/pkg/FR-2021-01-15/pdf/2020-28948.pdf
        date: 2021-01
    VOYAGER:
        title: Reed-Solomon Codes and the Exploration of the Solar System
        author:
        org: California Institute of Technologyâ€™s Jet Propulsion Laboratory
        target: https://trs.jpl.nasa.gov/bitstream/handle/2014/34531/94-0881.pdf
        date: 1993-08

--- abstract

This document describes how to add trust into the Broadcast Remote ID (RID) specification discussed in the DRIP Architecture. It defines message types and associated formats (sent within the Authentication Message) that can be used to authenticate past messages sent by an unmanned aircraft (UA) and provide proof of UA trustworthiness even in the absence of Internet connectivity at the receiving node.

--- middle

# Introduction

Unmanned Aircraft Systems (UAS) operate usually in a volatile environment when it comes to communication. Unmanned Aircraft (UA) are generally small with little computational (or flying) horsepower to carry standard communication equipment. This limits the media of communication to few viable options.

Observer systems (e.g., smartphones and tablets) place further constraints on the communication options. The Broadcast Remote ID (RID) messages must be available to applications on these platforms without modifying the devices.

As discussed in {{RFC9153}} two communication schemes to a UAS for Remote ID (RID) are considered: Broadcast and Network RID.

This document focuses on adding trust to Broadcast RID (Section 3.2 of {{RFC9153}}) via the Authentication Message by combining dynamically signed data with an endorsement of the UA's identity from a DRIP Identity Management Entity (DIME).

This authentication approach also provides the missing, but United States (US) Federal Aviation Administration (FAA) mandated, error correction for the Bluetooth 4.x transmissions (see {{fec-details}}). This is error correction not only for the authentication message itself, but indirectly, to other messages authenticated via the Manifest method (see {{drip-manifest}}).

A summary of addressed DRIP requirements is provided in {{req-sum}}.

## UAS Observers and DRIP Authentication

Without authentication, a UA Observer has no basis for trust. As the messages are sent via wireless broadcast, they may be sourced anywhere within wireless range and making any claims desired by the sender. The DRIP Specific Authentication Methods, as defined herein, when properly used enables a high level of trust on other ASTM message content and source. These messages are designed to provide the Observers with actionable information.

### UA Endorsement {#ua-attestation}

When an Observer receives a DRIP-based Authentication Message ({{drip-wrapper}}, {{drip-manifest}}, {{drip-frame}}) that only contains the UA DET, timestamps, and signature; it SHOULD use the DRIP Entity Tag (DET) to retrieve the Host Identity (HI) from DNS (Section 5, {{drip-registries}}) or a local cache to validate the signature. Once the Observer has the DET/HI pair, all further (or cached previous) DRIP Authentication Messages can be validated. The content signed over can now be trusted to have been sent by the holder of the private key corresponding to the HI and DET but not the context of it.

### DIME Endorsement {#dime-attestation}

When an Observer receives a DRIP Link Authentication Message ({{drip-link}}), that contains an endorsement of the UA DET DIME registration (Appendix B); it SHOULD use the DET of the DIME to retrieve the DIME HI from DNS (Section 5, {{drip-registries}}) or a local cache to validate the signature. The UA DET/HI pair is now known to be registered in a given DIME. As the HI is encapsulated in the data being endorsed all further (or previously received and cached) DRIP Authentication Messages using the UA DET can be validated.

### Chain of DIMEs to Trust Root

An Observer can receive a series of DRIP Link Authentication Messages ({{drip-link}}) each one pertaining to a DIMEs registration on the chain. Similar to {{dime-attestation}}, each link can be validated. A chain of  DIME Endorsements ({{dime-attestation}}) can also be obtained via DNS. This is done by decomposing the received DET and altering the HID values and performing CERT lookups containing a copy of DIME Endorsements.

### Authentication Content Correlation

While the content of DRIP Authentication Messages can be validated via their signature this does not resolves issues due to context of that information (as noted in {{ua-attestation}}). After signature validation the Observer MUST use other sources of information, for example a visual confirmation of UA position, to correlate against and provided context. When a correlation does not make sense it SHOULD be rejected as if the signature failed to validate.

# Terminology {#terminology}

## Required Terminology

The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in BCP 14 {{!RFC2119}} {{!RFC8174}} when, and only when, they appear in all capitals, as shown here.

## Definitions

This document makes use of the terms defined in {{RFC9153}}. In addition, the following terms are defined:

DRIP Entity Tag (DET):

> An HHIT that is used as an identifier in DRIP as specified in {{drip-rid}}.

DRIP Identity Management Entity:

> Registry service for DETs and other information in DRIP as specified in {{drip-registries}}.

Legacy Transports:

> use of broadcast frames (Bluetooth 4.x) as specified in {{F3411}}.

Extended Transports:

> use of extended advertisements (Bluetooth 5.x), service info (Wi-Fi NaN) or vendor specific element information (Wi-Fi BEACON) in broadcast frames as specified in {{F3411}}. Must use ASTM Message Pack (Message Type 0xF).

Hierarchial Host Identity Tag (HHIT):

> A special-use, non-routable, IPv6 address constructed as specified in {{drip-rid}}.

HHIT Domain Authority (HDA):

> A class of DIME usually associated with a USS in UTM.

Hierarchial ID (HID):

> Encoding of the RAA and HDA into the HHIT structure as defined in {{drip-rid}}.

Host Identity (HI):

> Public key have of an asymmetric keypair used in generating a HHIT as specified in {{drip-rid}}.

Registered Assigning Authority (RAA):

> A class of DIME usually associated with a CAA such as the US FAA.

# Background

## Problem Space and Focus

The initial standards for RID ({{FAA-14CFR}}, {{F3411}}) do not address the concerns of trust in the UA space with communication in the Broadcast RID environment. This is a requirement that will need to be addressed for various different parties that have a stake in the UA industry.

DRIP's goal as stated in the charter is:

> to specify how RID can be made trustworthy and available in both Internet and local-only connected scenarios, especially in emergency situations.

This document focuses on providing the first observable "link" of this trust chain over Broadcast RID; with an importance of the observer being offline. This first link is the primary stepping stone for an observer to gain access and use "enhanced related services".

### Broadcast RID Radio Frequency Options

A UA has the option of broadcasting using Bluetooth (4 and 5) or Wi-Fi (BEACON or NAN), see {{reqs}}.  With Bluetooth, FAA and other Civil Aviation Authorities (CAA) mandate transmitting simultaneously over both 4 and 5. With Wi-Fi, use of BEACON is recommended. Wi-Fi NAN is another option, depending on the CAA.

Bluetooth 4.x presents a payload size challenge in that it can only transmit 25 bytes of payload where the others all can support larger payloads.

## Reasoning for IETF DRIP Authentication

{{F3411}} defines Authentication Message framing only. It does not define authentication formats or methods. It explicitly anticipates several signature options, but does not fully define even those. {{F3411}} Annex A1 defines a Broadcast Authentication Verifier Service, which has a heavy reliance on real-time connectivity to the Internet (specifically into UTM) that is not always guaranteed. Fortunately, {{F3411}} also allows third party standard Authentication Types, several of which DRIP defines herein.

The standardization of specific formats to support the DRIP requirements in UAS RID for trustworthy communications over Broadcast RID is an important part of the chain of trust for a UAS ID. Per {{drip-arch}} in Section 5, there is a need to have Authentication formats to relay information for observers to determine trust. No existing formats (defined in {{F3411}} or other organizations leveraging this feature) provide the functionality to satisfy this goal resulting in the work reflected in this document.

## ASTM Authentication Message {#auth-message}

The ASTM Authentication Message (Message Type 0x2) is a unique message in the Broadcast {{F3411}} standard as it is the only one that is larger than the Bluetooth 4.x frame size. To address this, it is defined as a set of "pages" that each fits into a single Bluetooth 4.x broadcast frame. For other media these pages are still used but all in a single frame.

### Authentication Page {#auth-page}

{:fig: artwork-align="center"}
~~~~
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+---------------+---------------+---------------+---------------+
|  Page Header  |                                               |
+---------------+                                               |
|                                                               |
|                                                               |
|                     Authentication Payload                    |
|                                                               |
|                                                               |
+---------------+---------------+---------------+---------------+

Page Header: (1 byte)
    Authentication Type (4 bits)
    Page Number (4 bits)
    
Authentication Payload: (23 bytes per page)
    Authentication Payload, including headers. Null padded.
~~~~
{:fig #astm-auth-page title="Standard ASTM Authentication Message Page"}

This document leverages Authentication Type 0x5, Specific Authentication Method (SAM), as the principal authentication container, defining a set of SAM Types in {{drip-authentication-formats}}. This is denoted in every Authentication Page in the `Page Header`. The SAM Type is denoted as a field in the `Authentication Payload` (see {{sam-data}}).

The Authentication Message is structured as a set of pages. There is a technical maximum of 16 pages (indexed 0 to 15 in the `Page Header`) that can be sent for a single Authentication Message, with each page carrying a maximum 23-byte `Authentication Payload`. See {{drip-restrictions}} for more details. Over Bluetooth 4.x, these pages are "fragmented" into separate Bluetooth 4.x broadcast frames.

Either as a single Authentication Message or a set of fragmented Authentication Message Pages the structure is further wrapped by outer ASTM framing and the specific link framing (Bluetooth or Wi-Fi).

### Authentication Payload Field

{{astm-auth}} is the source data view of the data fields found in the Authentication Message as defined by {{F3411}}. This data is placed into {{astm-auth-page}}'s `Authentication Payload`, spanning multiple pages.

~~~~
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+---------------+---------------+---------------+---------------+
|                     Authentication Headers                    |
|                               +---------------+---------------+
|                               |                               |
+---------------+---------------+                               |
.                                                               .
.                Authentication Data / Signature                .
.                                                               .
|                                                               |
+---------------+---------------+---------------+---------------+
|      ADL      |                                               |
+---------------+                                               |
.                                                               .
.                       Additional Data                         .
.                                                               .
|                                                               |
+---------------+---------------+---------------+---------------+

Authentication Headers: (6-bytes)
    As defined in F3411.

Authentication Data / Signature: (255-bytes max)
    Opaque authentication data.

Additional Data Length (ADL): (1-byte - unsigned)
    Length in bytes of Additional Data.

Additional Data: (255-bytes max):
    Data that follows the Authentication Data / Signature but
    is not considered part of the Authentication Data.
~~~~
{:fig #astm-auth title="ASTM Authentication Message Fields"}

When `Additional Data` is being sent, a single unsigned byte (`Additional Data Length`) directly follows the `Authentication Data / Signature` and has the length, in bytes, of the following `Additional Data`. For DRIP, this field is used to carry Forward Error Correction as defined in {{fec-details}}.

### ASTM Constraints {#drip-restrictions}

To keep consistent formatting across the different transports (Legacy and Extended) and their independent restrictions, the authentication data being sent is REQUIRED to fit within the page limit that the most constrained existing transport can support. Under Broadcast RID the transport that can hold the least amount of authentication data is Bluetooth 5.x and Wi-Fi BEACON at 9-pages.

As such DRIP transmitters are REQUIRED to adhere to the following when using the Authentication Message:

1. `Authentication Data / Signature` data MUST fit in the first 9 pages (Page Numbers 0 through 8).
2. The `Length` field in the `Authentication Headers` (which denotes the length in bytes of `Authentication Data / Signature` only) MUST NOT exceed the value of 201.

# Forward Error Correction {#fec-details}

For Broadcast RID, Forward Error Correction (FEC) is provided by the lower layers in Extended Transports (Bluetooth 5.x, Wi-Fi NaN, and Wi-Fi BEACON). The Bluetooth 4.x Legacy Transport does not have supporting FEC so with DRIP Authentication the following application level FEC scheme is used to add FEC. This section is only used for Bluetooth 4.x transmission/reception.

The Bluetooth 4.x lower layers have error detection but not correction. Any frame in which Bluetooth detects an error is dropped and not delivered to higher layers (in our case, DRIP). Thus it can be treated as an erasure.

DRIP supports 2 different FEC encodings. Single Page FEC is the simpler scheme, but can correct for only a single erased page. Multiple Page FEC is more complex, but can correct for multiple erased pages.

The data added during FEC is not included in the `Authentication Data / Signature` but instead in the `Additional Data` field of {{astm-auth}}. This may cause the Authentication Message to exceed 9-pages, up to a maximum of 16-pages.

## General Encoding Rules

For DRIP the FEC data MUST start on a new ASTM Authentication Page. To do this once the results of parity encoding is placed in the `Additional Data` field of {{astm-auth}} with null padding before it to line up with the next page. The `Additional Data Length` field is set to `number of padding bytes + number of parity bytes`.

## General Decoding Rules

If Page 0 is being reconstructed an additional check of the `Last Page Index` to check against how many pages are actually present, MUST be performed for sanity. An additional check on the `Length` field SHOULD also be performed.

To determine if Single Page FEC or Multiple Page FEC has been used a simple check of the `Last Page Index` can be used. If the number of pages left after the `Length` of Authentication Data is not exhausted then the remaining pages should be all FEC. The `Additional Data Length` byte can further confirm this; taking into account any null padding needed for page alignment.

## Single Page

### Encoding {#enc-single-page}

To generate the parity a simple XOR operation using the previous parity page and current page is used. Only the 23-byte `Authentication Payload` field of {{astm-auth-page}} is used in the XOR operations. For Page 0, a 23-byte null pad is used for the previous parity page.

{{single-fec}} shows the last two pages (out of N) of an Authentication Message using DRIP Single Page FEC. The `Additional Data Length` is set to 33 as there is 23-bytes of FEC data and 10-bytes of padding to line it up into Page N.

~~~~
Page N-1:
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+---------------+---------------+---------------+---------------+
|  Page Header  |                                               |
+---------------+                                               |
|                Authentication Data / Signature                |
|                                                               |
|               +---------------+---------------+---------------+
|               |    ADL=33     |                               |
+---------------+---------------+                               |
|                          Null Padding                         |
|                                                               |
+---------------+---------------+---------------+---------------+

Page N:
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+---------------+---------------+---------------+---------------+
|  Page Header  |                                               |
+---------------+                                               |
|                                                               |
|                     Forward Error Correction                  |
|                                                               |
|                                                               |
|                                                               |
+---------------+---------------+---------------+---------------+
~~~~
{:fig #single-fec title="Example Single Page FEC Encoding"}

### Decoding {#dec-single-page}

To decode Single Page FEC in DRIP a rolling XOR is used on each `Authentication Page` received in the current `Authentication Message`. A Message Counter, outside of the ASTM Message but specified in {{F3411}} is used to signal a different `Authentication Message` and to correlate pages to them. This Message Counter is only 1-byte in length, so it will rollover (to 0x00) after reaching its maximum value (0xFF). If only 1-page is missing in the `Authentication Message` the resulting parity bytes should be the data of the erased page.

## Multiple Page

### Encoding {#enc-multi-page}

For Multiple Page FEC there are two variations: Frame Recovery and Page Recovery. Both follow a similar process, but are offset at what data is protected.

For DRIP the polynomial to use for Reed Solomon is: `1 + x^2 + x^3 + x^4 + x^8`. This polynomial was selected as it commonly used in Reed Solomon implementations. A form of it was deployed by the National Aeronautics and Space Administration (NASA) for the Voyager probes [VOYAGER]; a problem space with far tighter constraints than RID.

{{multi-fec}} is a generic example of Multiple Page FEC Authentication Message where 3-pages out of N are used for Reed Solomon FEC. The `Additional Data Length` is set to 72 as there are 10-bytes of padding and 62-bytes of parity from Reed Solomon.

~~~~
Page N-3:
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+---------------+---------------+---------------+---------------+
|  Page Header  |                                               |
+---------------+                                               |
|                Authentication Data / Signature                |
|                                                               |
|               +---------------+---------------+---------------+
|               |    ADL=72     |                               |
+---------------+---------------+                               |
|                          Null Padding                         |
|                                                               |
+---------------+---------------+---------------+---------------+

Page N-2:
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+---------------+---------------+---------------+---------------+
|  Page Header  |                                               |
+---------------+                                               |
|                                                               |
|                     Forward Error Correction                  |
|                                                               |
|                                                               |
|                                                               |
+---------------+---------------+---------------+---------------+

Page N-1:
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+---------------+---------------+---------------+---------------+
|  Page Header  |                                               |
+---------------+                                               |
|                                                               |
|                     Forward Error Correction                  |
|                                                               |
|                                                               |
|                                                               |
+---------------+---------------+---------------+---------------+

Page N:
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+---------------+---------------+---------------+---------------+
|  Page Header  |                                               |
+---------------+                                               |
|                                                               |
|                     Forward Error Correction                  |
|                                                               |
|               +---------------+---------------+---------------+
|               |                                               |
+---------------+          Null Padding                         |
|                                                               |
+---------------+---------------+---------------+---------------+
~~~~
{:fig #multi-fec title="Example Multiple Page FEC Encoding"}

> Informative Note: the last page in the example is padded to fill the full page as specified by {{F3411}}.

#### Page Recovery {#enc-page}

Page Recovery in Multiple Page FEC protects the same content, just the Authentication Message, as Single Page FEC. The benefit is increased protection from a maximum of one page, up to the page maximum (minus pages being used for authentication).

In Page Recovery, the `Authentication Payload` field of {{astm-auth-page}} for each page is used. Reed Solomon is performed in a byte-wise fashion across each Authentication Page to generate a number of parity bytes. The number of these parity bytes directly corresponds to the number of pages of FEC to be append to the Authentication Message. The resulting parity bytes are placed to the corresponding bytes in the FEC pages. This can be considered a form of interleaving that takes advantage of the fixed page length. 

See {{page-example}} for a detailed example of encoding for Page Recovery.

#### Frame Recovery {#enc-frame}

Frame Recovery in Multiple Page FEC protects not just the Authentication Message it is carried in but also other ASTM Messages being sent. This is at the cost of much longer Authentication Messages. Up to 240 messages (255 minus 15 pages maximum for FEC) can be protected using Frame Recovery.

For Frame Recovery both transmitter and receiver need to agree on what messages are being Reed Solomon'd over. It is RECOMMENDED that the data is limited to a full transmission set of ASTM Messages. For example in the European Union (EU) a full set of ASTM Messages would include: 1x Basic ID, 1x Location/Vector, 1x System and 1x Operator ID. With DRIP this would also included 1x Authentication that would be carrying the FEC (along with DRIP Authentication).

Similar to {{enc-page}}, Reed Solomon is performed in a bytes-wise fashion across messages to generate the desired number of parity bytes. These messages MUST be in Message Type order when performing the Reed Solomon operation. All 25-bytes of the ASTM Message are used during this operation for Frame Recovery. After the computation the new pseudo-frames formed by the parity are concatenated together. The length of this data is used in the calculation of the `Additional Data Length` with the amount of padding needed to align to a new Authentication Page. The padding and parity data are then placed in the `Additional Data` field.

See {{frame-example}} for a detailed example of encoding for Frame Recovery.

### Decoding {#dec-multi-page}

To determine if Page Recovery or Frame Recovery is used two modulo checks with the `ADL` after the length of the null-pad is removed are needed. One against the value of 23, and the other against the value of 25. If 23 comes back with a value of 0 then Page Recovery is being used. If 25 comes back with 0 then Frame Recovery is used. Any other combination indicates an error.

As it is known which pages were not received in an `Authentication Message` (or were erased by Bluetooth due to detected errors), the Reed Solomon capacity can be dedicated exclusively to correction of erasures, rather than to detection and correction of errors, thereby doubling its effective capacity. This is accomplished by marking the erasures, i.e., filling the dummy page(s) or frames with nulls.

For either Page Recovery or Frame recovery the first step on the receiver is to create empty (or dummy) `Authentication Pages` for any pages missing in the `Authentication Message`. Then the `Additional Data` can be extracted from the `Authentication Message`, have its null-padding removed and further processed.

#### Page Recovery {#dec-page}

To decode Page Recovery, the received FEC data along with the `Authentication Payload` of each `Authentication Page` has Reed Solomon performed using erasures byte-wise across the pages. The results should have all pages of the `Authentication Message` recovered. The receiver SHOULD validate the rebuilt message before decoding the actual authentication.

#### Frame Recovery {#dec-frame}

To decode Frame Recovery, the receiver breaks the `Additional Data` into 25-byte chunks. This will produce the pseudo-frames of parity bytes from the `Authentication Message`.

To build the rest of the message set, static messages such as Basic ID and Operator ID are constant and can be filled in using any received copy that is cache by the receiver for that UA. Dynamic messages in the set, such as Location/Vector or System can be nulled out to have Reed Solomon alway recover them and the results checked against cached copies from recent transmissions of the UA.

With all the frames in the set, Reed Solomon can be used in an erasure mode to decode byte-wise across the frames to fill in the erasures and rebuild the entire set of messages. Validation of the `Authentication Message` SHOULD be performed before further processing of authentication data.

## FEC Limitations

The worst case scenario is when the `Authentication Data / Signature` ends perfectly on a page (Page N-1). This means the `Additional Data Length` would start the next page (Page N) and have 22-bytes worth of null padding to align the FEC to begin at the start of the next page (Page N+1). In this scenario an entire page (Page N) is being wasted just to carry the `Additional Data Length`. This should be avoided where possible in an effort to maintain efficiency.

# DRIP Authentication Formats

All formats defined in this section are the content for the `Authentication Data / Signature` field in {{astm-auth}} and use the Specific Authentication Method (SAM, Authentication Type 0x5). The first byte of the `Authentication Data / Signature` of {{astm-auth}}, is used to multiplex between these various formats.

When sending data over a medium that does not have underlying Forward Error Correction (FEC), for example Bluetooth 4.x, then {{fec-details}} MUST be used. {{appendix-a}} gives a high-level overview of a state machine for decoding and determining a trustworthiness state. {{appendix-c}} shows an example of using the formats defined in this section.

## DRIP Authentication Field Definitions

ASTM Message (25-bytes):

> Full ASTM Message as defined in {{F3411}}; specifically Message Types 0x0, 0x1, 0x3, 0x4, and 0x5

ASTM Message Hash (12-bytes):

> Hash of a single full ASTM Message using hash operations described in ({{hash-op}}). Multiple hashes MUST be in Message Type order.

Attestation Data (0 to 112 bytes):

> Opaque attestation data that the UA is attesting during its flight in {{drip-data}}.

Broadcast Endorsement (136-bytes):

> DIME HI over UA DET/HI. Generated by a DIME during a UA DET, being used as a Session ID, registration. Used in {{drip-link}}.

Current Manifest Hash (12-bytes):

> Hash of the current Manifest Message ({{drip-manifest}}). See {{block-hashes}}.

Frame Type (1-byte):

> Sub-type for future different DRIP Frame formats. See {{frame-type}}.

Not Before Timestamp by UA (4-bytes):

> Timestamp denoting recommended time to start trusting data in {{drip-data}}. MUST follow the format defined in {{F3411}}. That is a Unix-style timestamp but with an epoch of 01/01/2019 00:00:00.  MUST be set no earlier than the time the signature is generated.

Not After Timestamp by UA (4-bytes):

> Timestamp denoting recommended time to stop trusting data in {{drip-data}}. MUST follow the format defined in {{F3411}}. That is a Unix-style timestamp but with an epoch of 01/01/2019 00:00:00 with an additional offset is then added to push a short time into the future (relative to `Not Before Timestamp`) to avoid replay attacks. The offset used against the Unix-style timestamp is not defined in this document. Best practice identifying an acceptable offset should be used taking into consideration the UA environment, and propagation characteristics of the messages being sent and clock differences between the UA and Observers. A reasonable time would be to set `Not After Timestamp` 2 minutes after `Not Before Timestamp`.

Previous Manifest Hash (12-bytes):

> Hash of the previously sent Manifest Message ({{drip-manifest}}). See {{block-hashes}}.

UA DRIP Entity Tag (16-bytes):

> The UA DET {{drip-rid}} in byte form (network byte order) and is part of {{drip-data}}.

UA Signature (64-bytes):

> Signature over all 4 preceding fields of {{drip-data}} using the HI of the UA.

### Broadcast Attestation Structure {#bas}

<!-- Remove this section as the subsections really just fill this in? -->

Variations of the `Attestation Structure` format of {{drip-registries}} MUST be used when running DRIP Authentication under the DRIP SAM Types (filling the `SAM Authentication Data` field ({{sam-authentication-data}})). The only differences are that the timestamps are set by the UA and the `Attestor Identity Information` is set to the DET of the UA.

When using this structure, the UA is minimally self-attesting its DET. It may be attesting the DET registration in a specific HID (see {{link-example}}). The HI of the UA DET can be looked up by mechanisms described in {{drip-registries}} or by extracting it from a Broadcast Endorsement (see {{drip-link}} and {{drip-recommendations}}).

~~~~
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+---------------+---------------+---------------+---------------+
|                                                               |
|                              UA                               |
|                        DRIP Entity Tag                        |
|                                                               |
+---------------+---------------+---------------+---------------+
|                                                               |
.                                                               .
.                        Attestation Data                       .
.                                                               .
|                                                               |
+---------------+---------------+---------------+---------------+
|                   Not Before Timestamp by UA                  |
+---------------+---------------+---------------+---------------+
|                    Not After Timestamp by UA                  |
+---------------+---------------+---------------+---------------+
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                          UA Signature                         |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
+---------------+---------------+---------------+---------------+
~~~~
{:fig #drip-data title="Broadcast Attestation Structure"}

### SAM Data Format {#sam-data}

{{sam-frame}} is the general format to hold authentication data when using SAM and is placed inside the `Authentication Data / Signature` field in {{astm-auth}}.

~~~~
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+---------------+---------------+---------------+---------------+
|   SAM Type    |                                               |
+---------------+                                               |
.                                                               .
.                     SAM Authentication Data                   .
.                                                               .
|                                                               |
+---------------+---------------+---------------+---------------+

SAM Type (1 byte):
    Byte defined by F3411 to multiplex SAMs

SAM Authentication Data (0 to 200 bytes):
    Authentication data (opaque to baseline F3411 but parsed by DRIP).
~~~~
{:fig #sam-frame title="SAM Data Format"}

#### SAM Type

The SAM Type field is maintained by the International Civil Aviation Organization (ICAO) and for DRIP four are planned to be allocated:

| SAM Type | Description                       |
| -------- | --------------------------------- |
| 0x01     | DRIP Link ({{drip-link}})         |
| 0x02     | DRIP Wrapper ({{drip-wrapper}})   |
| 0x03     | DRIP Manifest ({{drip-manifest}}) |
| 0x04     | DRIP Frame ({{drip-frame}})       |

#### SAM Authentication Data

This field has a maximum size of 200-bytes, as defined by {{drip-restrictions}}. The Broadcast Attestation Structure ({{bas}}) MUST be used in this space.

## DRIP Link

The DRIP Link SAM Type is used to transmit Broadcast Endorsements. For example, the `Broadcast Endorsement: DIME, UA` is sent (see {{drip-recommendations}}) as a DRIP Link message. The structure is defined in {{drip-registries}} and an example of it can be found in {{link-example}}.

DRIP Link is important as its contents are used to provide trust in the DET/HI pair that the UA is currently broadcasting. This message does not require Internet connectivity to perform signature validations of the contents when the DIME DET/HI is in the receiver's cache. It also provides the UA HI so that connectivity is not required when performing validation of other DRIP Authentication Messages.

~~~~
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+---------------+---------------+---------------+---------------+
|                                                               |
.                                                               .
.                      Broadcast Endorsement                    .
.                                                               .
|                                                               |
+---------------+---------------+---------------+---------------+
~~~~
{:fig #link-fig title="DRIP Link"}

This DRIP Authentication Message is used in conjunction with other DRIP SAM Types (such as Manifest or Wrapper) that contain data that is guaranteed to be unique, unpredictable and easily cross checked by the receiving device. The only {{F3411}} message type satisfying these requirements is the Location/Vector Message (Message Type 0x2). The hash of such a message MAY merely be included in a DRIP Manifest, but an entire such message SHOULD be encapsulated in a DRIP Wrapper periodically for stronger security.

## DRIP Wrapper

This SAM Type is used to wrap and sign over a list of other {{F3411}} Broadcast RID messages. It MUST use the Broadcast Attestation Structure ({{bas}}).

The `Attestation Data` field is filled with full (25-byte) {{F3411}} Broadcast RID messages. The minimum number being 1 and the maximum being 4. The encapsulated messages MUST be in Message Type order as defined by {{F3411}}. All message types except Authentication (Message Type 0x2) and Message Pack (Message Type 0xF) are allowed.

To determine the number of messages wrapped the receiver can check that the length of the `Attestation Data` field of the DRIP Broadcast Attestation ({{bas}}) is a multiple of 25-bytes.

~~~~
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+---------------+---------------+---------------+---------------+
|                                                               |
|                              UA                               |
|                        DRIP Entity Tag                        |
|                                                               |
+---------------+---------------+---------------+---------------+
|                                                               |
.                                                               .
.                         ASTM Message(s)                       .
.                                                               .
|                                                               |
+---------------+---------------+---------------+---------------+
|                   Not Before Timestamp by UA                  |
+---------------+---------------+---------------+---------------+
|                    Not After Timestamp by UA                  |
+---------------+---------------+---------------+---------------+
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                          UA Signature                         |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
+---------------+---------------+---------------+---------------+
~~~~
{:fig #wrapper-fig title="DRIP Wrapper over Legacy Transports"}

### Wrapper over Extended Transports

To send the DRIP Wrapper over Extended Transports the messages being wrapped are co-located with the Authentication Message in a ATM Message Pack (Message Type 0xF). The ASTM Messages are removed from the DRIP Wrapper after signing (as they are redundant) leaving the following structure that is placed into the `SAM Authentication Data` of {{sam-frame}} and sent in the same Message Pack.

~~~~
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+---------------+---------------+---------------+---------------+
|                                                               |
|                              UA                               |
|                        DRIP Entity Tag                        |
|                                                               |
+---------------+---------------+---------------+---------------+
|                   Not Before Timestamp by UA                  |
+---------------+---------------+---------------+---------------+
|                    Not After Timestamp by UA                  |
+---------------+---------------+---------------+---------------+
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                          UA Signature                         |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
+---------------+---------------+---------------+---------------+
~~~~
{:fig #set-sig title="DRIP Wrapper over Extended Transports"}

To verify the signature the receiver must concatenate all the messages in the Message Pack (excluding Authentication Message found in the same Message Pack) in Message Type order and place them between the `UA DRIP Entity Tag` and `Not Before Timestamp` before performing signature verification.

The functionality of Wrapper in this form is identical to Authentication Type 0x3 (Message Set Signature) when running over Extended Transports. What Wrapper provides is the same format but over both Extended and Legacy Transports allowing the transports to be similar. Message Set Signature also implies using the ASTM validator system architecture which relies on Internet connectivity for verification which the receiver may not have at the time of receipt of an Authentication Message. This is something Wrapper, and all DRIP Authentication Formats, avoid when the UA key is obtained via a DRIP Link Authentication Message.

### Wrapper Limitations

The primary limitation of the Wrapper format is the bounding of up to 4 ASTM Messages that can be sent within it. Another limitation is that the format can not be used as a surrogate for messages it is wrapping. This is due to high potential a receiver on the ground does not support DRIP. Thus, when Wrapper is being used the wrapper data must effectively be sent twice, once as a single framed message (as specified in {{F3411}}) and then again wrapped within the Wrapper format.

## DRIP Manifest

This SAM Type is used to create message manifests. It MUST use the Broadcast Attestation Structure ({{bas}}).

By hashing previously sent messages and signing them we gain trust in UAs previous reports. An observer who has been listening for any length of time can hash received messages and cross-check against listed hashes. This is a way to evade the limitation of a maximum of 4 messages in the Wrapper Format and reduce overhead.

The `Attestation Data` field is filled with 12-byte hashes of previous {{F3411}} Broadcast messages. A receiver does not need to have received every message in the manifest to verify it. A manifest SHOULD typically encompass a single transmission cycle of messages being sent, see {{operational}}.

~~~~
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+---------------+---------------+---------------+---------------+
|                                                               |
|                              UA                               |
|                        DRIP Entity Tag                        |
|                                                               |
+---------------+---------------+---------------+---------------+
|                                                               |
|                     Previous Manifest Hash                    |
|                                                               |
+---------------+---------------+---------------+---------------+
|                                                               |
|                     Current Manifest Hash                     |
|                                                               |
+---------------+---------------+---------------+---------------+
|                                                               |
.                                                               .
.                     ASTM Message Hash(es)                     .
.                                                               .
|                                                               |
+---------------+---------------+---------------+---------------+
|                   Not Before Timestamp by UA                  |
+---------------+---------------+---------------+---------------+
|                    Not After Timestamp by UA                  |
+---------------+---------------+---------------+---------------+
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                          UA Signature                         |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
+---------------+---------------+---------------+---------------+
~~~~
{:fig #manifest-fig title="DRIP Manifest"}

### Hash Count

The number of hashes in the Manifest can be variable (3-9). An easy way to determine the number of hashes is to take the length of the data between the end of the `UA DRIP Entity Tag` and `Not Before Timestamp by UA` and divide it by the hash length (12). If this value is not rational, the message is invalid.

### Message Hash Algorithms and Operation {#hash-op}

The hash algorithm used for the Manifest Message is the same hash algorithm used in creation of the DET {{drip-rid}} that is signing the Manifest.

An DET using cSHAKE128 {{!NIST.SP.800-185}} computes the hash as follows:

~~~~
cSHAKE128(ASTM Message, 96, "", "Remote ID Auth Hash")
~~~~

>> Informative Note: {{drip-rid}} specifies cSHAKE128 but is open for the expansion of other OGAs.

#### Legacy Transport Hashing

Under this transport DRIP hashes the full ASTM Message being sent over the Bluetooth Advertising frame. For Authentication Messages all the Authentication Message Pages are concatenated together and hashed as one object. For all other Message Types the 25-byte message is hashed.

#### Extended Transport Hashing

Under this transport DRIP hashes the full ASTM Message Pack (Message Type 0xF) - regardless of its content.

### Pseudo-Blockchain Hashes {#block-hashes}

Two special hashes are included in all Manifest messages; a previous manifest hash, which links to the previous manifest message, as well as a current manifest hash. This gives a pseudo-blockchain provenance to the manifest message that could be traced back if the observer was present for extended periods of time.

Creation:

: During creation and signing of this message format this field MUST be set to 0. So the signature will be based on this field being 0, as well as its own hash. It is an open question of if we compute the hash, then sign or sign then compute.

Cycling:

: There a few different ways to cycle this message. We can "roll up" the hash of 'current' to 'previous' when needed or to completely recompute the hash. This mostly depends on the previous note.

### Manifest Limitations

A potential limitation to this format is dwell time of the UA. If the UA is not sticking to a general area then most likely the Observer will not obtain many (if not all) of the messages in the manifest. Examples of such scenarios include delivery or survey UA.

## DRIP Frame

This SAM Type is for when the authentication data does not fit in other defined formats under DRIP and is reserved for future expansion under DRIP if required. This SAM Type MUST use the Broadcast Attestation Structure ({{bas}}).

~~~~
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+---------------+---------------+---------------+---------------+
|                                                               |
|                              UA                               |
|                        DRIP Entity Tag                        |
|                                                               |
+---------------+---------------+---------------+---------------+
|  Frame Type   |                                               |
+---------------+                                               .
.                     Frame Attestation Data                    .
.                                                               .
|                                                               |
+---------------+---------------+---------------+---------------+
|                   Not Before Timestamp by UA                  |
+---------------+---------------+---------------+---------------+
|                    Not After Timestamp by UA                  |
+---------------+---------------+---------------+---------------+
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                          UA Signature                         |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
+---------------+---------------+---------------+---------------+
~~~~
{:fig #frame-fig title="DRIP Frame"}

### Frame Type

Byte to sub-type for future different DRIP Frame formats. It takes the first byte of `Attestation Data` in {{bas}} leaving 111-bytes for `Frame Attestation Data`.

| Frame Type | Name | Description |
| ---------- | ---- | ----------- |
| 0x00       | Reserved | Reserved |
| 0xC0-0xFF  | Experimental | Experimental Use |

# Requirements & Recommendations {#reqs}

## Legacy Transports

With Legacy Advertisements the goal is to attempt to bring reliable receipt of the paged Authentication Message. FEC ({{fec-details}}) MUST be used, per mandated RID rules (for example the US FAA RID Rule {{FAA-14CFR}}), when using Legacy Advertising methods (such as Bluetooth 4.x).

Under ASTM Bluetooth 4.x rules, transmission of dynamic messages is at least every 1 second. DRIP Authentication Messages typically contain dynamic data (such as the DRIP Manifest or DRIP Wrapper) and should be sent at the dynamic rate of 1 per second.

## Extended Transports

Under the ASTM specification, Bluetooth 5.x, Wi-Fi NaN, and Wi-Fi BEACON transport of RID is to use the Message Pack (Message Type 0xF) format for all transmissions. Under Message Pack messages are sent together (in Message Type order) in a single Bluetooth 5.x extended frame (up to 9 single frame equivalent messages under Bluetooth 4). Message Packs are required by ASTM to be sent at a rate of 1 per second (like dynamic messages).

Without any fragmentation or loss of pages with transmission FEC ({{fec-details}}) MUST NOT be used as it is impractical.

## Authentication {#drip-recommendations}

It is REQUIRED that a UA send the following Authentication Formats to fulfill the requirements in {{RFC9153}}:

1. SHOULD: send DRIP Link using the `Broadcast Endorsement: DIME:Apex, DIME:RAA` (satisfying GEN-3); at last once per 5 minutes
2. MUST: send DRIP Link using the `Broadcast Endorsement: DIME:RAA, DIME:HDA`(satisfying GEN-3); at least once per 5 minutes
3. MUST: send DRIP Link using the `Broadcast Endorsement: DIME:HDA, UA` (satisfying ID-5, GEN-1 and GEN-3); at least once per minute
4. MUST: send any other DRIP Authentication Format (RECOMMENDED: DRIP Manifest or DRIP Wrapper) where the UA is dynamically signing data that is guaranteed to be unique, unpredictable and easily cross checked by the receiving device (satisfying ID-5, GEN-1 and GEN-2); at least once per 5 seconds

## Operational

UAS operation may impact the frequency of sending DRIP Authentication messages. Where a UA is dwelling in one location, and the channel is heavily used by other devices, "occasional" message authentication may be sufficient for an observer. Contrast this with a UA traversing an area, and then every message should be authenticated as soon as possible for greatest success as viewed by the receiver.

Thus how/when these DRIP authentication messages are sent is up to each implementation. Further complication comes in contrasting Legacy and Extended Transports.  In Legacy, each message is a separate hash within the Manifest. So, again in dwelling, may lean toward occasional message authentication. In Extended Transports, the hash is over the Message Pack so only few hashes need to be in a Manifest. A single Manifest can handle a potential two Message Packs (for a full set of messages) and a DRIP Link Authentication Message for the `Broadcast Endorsement: DIME, UA`.

A separate issue is the frequency of transmitting the DRIP Link Authentication Message for the `Broadcast Endorsement: DIME, UA` when using a Manifest Message. This message content is static; its hash never changes radically. The only change is the 4-byte timestamp in the Authentication Message headers. Thus, potentially, in a dwelling operation it can be sent once per minute, where its hash is in every Manifest. A receiver can cache all DRIP Link Authentication Message for the `Broadcast Endorsement: DIME, UA` to mitigate potential packet loss.

The preferred mode of operation is to send the `Broadcast Endorsement: DIME, UA` every 10 seconds and Manifest messages immediately after a set of UA operation messages (e.g. Basic, Location, and System messages).

### DRIP Wrapper {#wrapper-operations}

The DRIP Wrapper MUST NOT be used in place of sending the ASTM messages as is. All receivers MUST be able to process all the messages specified in {{F3411}}.  Sending them within the DRIP Wrapper makes them opaque to receivers lacking support for DRIP authentication messages. Thus, messages within a Wrapper are sent twice: in the clear and authenticated within the Wrapper. The DRIP Manifest format would seem to be a more efficient use of the transport channel.

The DRIP Wrapper has a specific use case for DRIP aware receivers. For receiver plotting received Location Messages (Message Type 0x2) on a map display an embedded Location Message in a DRIP Wrapper can be colored differently to signify trust in the Location data - be it current or previous Location reports that are wrapped.

# Summary of Addressed DRIP Requirements {#req-sum}

The following {{RFC9153}} are addressed in this document:

ID-5: Non-spoofability

> Addressed using the DRIP Wrapper ({{drip-wrapper}}), DRIP Manifest ({{drip-manifest}}) or DRIP Frame ({{drip-frame}}).

GEN-1: Provable Ownership

> Addressed using the DRIP Link ({{drip-link}}) and DRIP Wrapper ({{drip-wrapper}}), DRIP Manifest ({{drip-manifest}}) or DRIP Frame ({{drip-frame}}).

GEN-2: Provable Binding

> Addressed using the DRIP Wrapper ({{drip-wrapper}}), DRIP Manifest ({{drip-manifest}}) or DRIP Frame ({{drip-frame}}).

GEN-3: Provable Registration

> Addressed using the DRIP Link ({{drip-link}}).

# ICAO Considerations

DRIP requests the following SAM Types to be allocated:

1. DRIP Link
2. DRIP Wrapper
3. DRIP Manifest
4. DRIP Frame

<!-- Author Note (atw): need help on this section; how should this be formatted? -->

# IANA Considerations

## IANA DRIP Registry

This document requests a new subregistry for Frame Type under the [DRIP registry](https://datatracker.ietf.org/doc/html/draft-ietf-drip-rid-28#section-8.2).

DRIP Frame Type:

: This 8-bit valued subregistry is for Frame Types in DRIP Frame Authentication Messages. Future additions to this subregistry are to be made through Expert Review (Section 4.5 of {{RFC8126}}). The following values are defined:

~~~~
| Frame Type | Name         | Description      |
| ---------- | ------------ | ---------------- |
| 0x00       | Reserved     | Reserved         |
| 0xC0-0xFF  | Experimental | Experimental Use |
~~~~

# Security Considerations

## Replay Attacks

The astute reader may note that the DRIP Link messages, which are recommended to be sent, are static in nature and contain various timestamps. These DRIP Link messages can easily be replayed by an attacker who has copied them from previous broadcasts. There are two things to mitigate this in DRIP:

1. If an attacker (who is smart and spoofs more than just the UAS ID/data payloads) willing replays an DRIP Link message they have in principle actually helped by ensuring the message is sent more frequently and be received by potential Observers.
2. It is REQUIRED to send more than DRIP Link messages, specifically those that sign over changing data using the current session keypair, and those messages are sent more frequently. An UA beaconing these messages then actually signing other messages using the keypair validates the data receiver by an Observer. An UA who does not either run DRIP themselves or does not have possession of the same private key, would be clearly exposed upon signature verification.

## Trust Timestamp Offsets

Note the discussion of Trust Timestamp Offsets here is in context of the DRIP Wrapper ({{drip-wrapper}}) and DRIP Manifest ({{drip-manifest}}) messages. For DRIP Link ({{drip-link}}) messages these offsets are set by the Attestor (typically a DIME) and have their own set of considerations as seen in {{drip-registries}}.

The offset of the Trust Timestamp (defined as a very short Expiration Timestamp) is one that needs careful consideration for any implementation. The offset should be shorter than any given flight duration (typically less than an hour) but be long enough to be received and processed by Observers (larger than a few seconds). It recommended that 3-5 minutes should be sufficient to serve this purpose in any scenario, but is not limited by design.

# Acknowledgments

- Ryan Quigley and James Mussi of AX Enterprize, LLC for early prototyping to find holes in the draft specifications.
- Soren Friis for pointing out that Wi-Fi implementations would not always give access to the MAC Address, originally used in calculation of the hashes for DRIP Manifest. Also, for confirming that Message Packs (0xF) can only carry up to 9 ASTM frames worth of data (9 Authentication pages) - this drove the requirement for maximum page length of Authentication Data itself.
- Many thanks to Rick Salz for the secdir review.

--- back

# Authentication State Diagrams & Color Scheme {#appendix-a}

ASTM Authentication has only 3 states: None, Invalid or Valid. This is because under ASTM the idea is that Authentication is done by an external service hosted somewhere on the Internet so it is assumed you will always get some sort of answer back. With DRIP this classification becomes more complex with the support of "offline" scenarios where the receiver does not have Internet connectivity. With the use of asymmetric keys this means the public key (PK) must somehow be obtained - {{drip-registries}} gets more into detail how these keys are stored on DNS and one reason for DRIP Authentication is to send PK's over Broadcast RID.

There are two keys of interest: the PK of the UA and the PK of the DIME. This document gives a clear way to send the PK of the UA over the Broadcast RID messages. The key of the DIME can be sent over Broadcast RID using the same mechanisms (see {{drip-link}} and {{drip-recommendations}}) but is not required due to potential operational constraints of sending multiple DRIP Link messages. As such there are scenarios where you may have part of the key-chain but not all of it.

The intent of this appendix is to give some kind of recommended way to classify these various states and convey it to the user through colors and state names/text.

## State Colors

The table below lays out the RECOMMENDED colors to associate with state.

| State        | Color  | Details                                                         |
| ------------ | ------ | --------------------------------------------------------------- |
| None         | Black  | No Authentication being received                                |
| Partial      | Gray   | Authentication being received but missing pages                 |
| Unsupported  | Brown  | Authentication Type/SAM Type of received message not supported  |
| Unverifiable | Yellow | Data needed for verification missing                            |
| Verified     | Green  | Valid verification results                                      |
| Trusted      | Blue   | Valid verification results and DIME is marked as trusted        |
| Questionable | Orange | Inconsistent verification results                               |
| Unverified   | Red    | Invalid verification results                                    |
| Conflicting  | Purple | Inconsistent verification results and DIME is marked as trusted |

## State Diagrams

This section gives some RECOMMENDED state flows that DRIP should follow. Note that the state diagrams do not have all error conditions mapped.

### Notations

~~~~
o--------------o
|   PROCESS    |
o--------------o

+--------------+
|    STATE     |
+--------------+

 ooooo
o  N  o    Transition N
 ooooo

+----->    Transition Option False/No

----->     Transition Option True/Yes

~~~~
{:fig #state-notations title="Diagram Notations"}

### General

~~~~
o---------------------o      ooooo        +------+
|        Start        |---->o  1  o+----->| None |
o---------------------o      ooooo        +------+
                               |
                               v
                             ooooo        +-------------+
                            o  2  o+----->| Unsupported |
                             ooooo        +-------------+
                               |             ^
                               v             |
          +---------+        ooooo           |
          | Partial |<-----+o  3  o          |
          +---------+        ooooo           |
                               |             |
                               v             +
                             ooooo         ooooo        o-------------o
                            o  4  o------>o  5  o------>| SAM Decoder |
                             ooooo         ooooo        o-------------o
                               +
                               |
                               v
                        o------------------o
                        | AuthType Decoder |
                        o------------------o
~~~~
{:fig #std-state-fig title="Standard Authentication Colors/State"}

| Transition | Transition Query                              | Next State/Process/Transition (Yes, No) |
| ---------- | --------------------------------------------- | --------------------------------------- |
| 1          | Receiving Authentication Pages?               | 2, None                                 |
| 2          | Authentication Type Supported?                | 3, Unsupported                          |
| 3          | All Pages of Authentication Message Received? | 4, Partial                              |
| 4          | Is Authentication Type received 5?            | 5, AuthType Decoder                     |
| 5          | Is SAM Type Supported?                        | SAM Decoder, Unsupported                |

### DRIP SAM

~~~~
o-------------o      ooooo        o-----------------------------o
| SAM Decoder |---->o  6  o------>| DRIP Wrapper/Manifest/Frame |
o-------------o      ooooo        o-----------------------------o
                       +                 |              ^
                       |                 |              |
                       v                 v              |
                o-----------o    o--------------------o |
                | DRIP Link |--->| Update State Cache | |
                o-----------o    o--------------------o |
                                   |                    |
                                   v                    |
        o--------------o         ooooo       o----------------------o
        | NOP / Return |<------+o  7  o----->| Extract Message from |
        o--------------o         ooooo       | Verification Queue   |
                                             o----------------------o
~~~~
{:fig #sam-state-fig title="DRIP SAM Decoder"}

| Transition | Transition Query                | Next State/Process/Transition (Yes, No)               |
| ---------- | ------------------------------- | ----------------------------------------------------- |
| 6          | Is SAM Type DRIP Link?          | DRIP Link, DRIP Wrapper/Manifest/Frame                |
| 7          | Messages in Verification Queue? | Extract Message from Verification Queue, NOP / Return |

### DRIP Link {#link-diagram}

~~~~
o-----------o       ooooo         ooooo        +--------------+
| DRIP Link |----->o  8  o+----->o  9  o+----->| Unverifiable |
o-----------o       ooooo         ooooo        +--------------+
                      |             |
                      |-------------'
                      v
                    ooooo        +------------+
                   o  10 o+----->| Unverified |
                    ooooo        +------------+
                      |
                      v
                o---------------------o
                | Add UA DET/PK       |
                | to Key Cache        |
                o---------------------o
                      |
                      v
                    ooooo         +----------+
                   o  11 o+------>| Verified |
                    ooooo         +----------+
                      |              ^
                      v              |
                o-------------------------o
                | Mark UA DET/PK          |
                | as Trusted in Key Cache |
                o-------------------------o
~~~~ 
{:fig #drip-link-state-fig title="DRIP Link State Decoder"}

| Transition | Transition Query                            | Next State/Process/Transition (Yes, No)                |
| ---------- | --------------------------------------------| ------------------------------------------------------ |
| 8          | DIME DET/PK in Key Cache?                   | 10, 9                                                  |
| 9          | DIME PK found Online?                       | 10, Unverifiable                                       |
| 10         | DIME Signature Verified?                    | Add UA DET/PK to Key Cache, Unverified                 |
| 11         | DIME DET/PK marked as Trusted in Key Cache? | Mark UA DET/PK as Trusted in Key Cache, Verified       |

### DRIP Wrapper/Manifest/Frame

~~~~
o-----------------------------o         +--------------+
| DRIP Wrapper/Manifest/Frame |         | Unverifiable |
o-----------------------------o         +--------------+
           |                                   ^
           v                                   |
         ooooo         ooooo        o--------------------o
        o  12 o+----->o  13 o+----->| Add Message to     |
         ooooo         ooooo        | Verification Queue |
           |             |          o--------------------o
           |             |                    
           |-------------'             
           v                           
         ooooo         ooooo         ooooo        +------------+
        o  14 o+----->o  15 o+----->o  16 o+----->| Unverified |
         ooooo         ooooo         ooooo        +------------+
           |             |             |
           v             v             |
         ooooo        +-------------+  |
        o  17 o+----->| Conflicting |  |
         ooooo        +-------------+  |
           |                           |
           v                           v
         ooooo                  +--------------+
        o  18 o---------------->| Questionable |
         ooooo                  +--------------+
           +
           |
           v
         ooooo        +----------+
        o  19 o+----->| Verified |
         ooooo        +----------+
           |
           v
        +---------+
        | Trusted |
        +---------+
~~~~
{:fig #drip-state-fig title="DRIP Wrapper/Manifest/Frame State Decoder"}

| Transition | Transition Query                                                          | Next State/Process/Transition (Yes, No) |
| ---------- | ------------------------------------------------------------------------- | --------------------------------------- |
| 12         | UA DET/PK in Key Cache?                                                   | 14, 13                                  |
| 13         | UA PK found Online?                                                       | 14, Add Message to Verification Queue   |
| 14         | UA Signature Verified?                                                    | 17, 15                                  |
| 15         | Has past Messages of this type been marked as Trusted?                    | Conflicting, 16                         |
| 16         | Has past Messages of this type been marked as Questionable or Verified?   | Questionable, Unverified                |
| 17         | Has past Messages of this type been marked as Conflicting?                | Conflicting, 18                         |
| 18         | Has past Messages of this type been marked as Questionable or Unverified? | Questionable, 19                        |
| 19         | Is UA DET/PK marked as Trusted in Key Cache?                              | Trusted, Verified                       |

# Broadcast Endorsement: DIME, UA {#link-example}

~~~~
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+---------------+---------------+---------------+---------------+
|                                                               |
|                             DRIP                              |
|                      Entity Tag of DIME                       |
|                                                               |
+---------------+---------------+---------------+---------------+
|                                                               |
|                             DRIP                              |
|                       Entity Tag of UA                        |
|                                                               |
+---------------+---------------+---------------+---------------+
|                                                               |
|                                                               |
|                                                               |
|                      Host Identity of UA                      |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
+---------------+---------------+---------------+---------------+
|                  Not Before Timestamp by DIME                 |
+---------------+---------------+---------------+---------------+
|                   Not After Timestamp by DIME                 |
+---------------+---------------+---------------+---------------+
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                      Signature by DIME                        |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
+---------------+---------------+---------------+---------------+

DRIP Entity Tag of DIME: (16-bytes)
    DET of DIME.

DRIP Entity Tag of UA: (16-bytes)
    DET of UA.

Host Identity of UA: (32-bytes)
    HI of UA

Expiration Timestamp by DIME (4 bytes):
    Timestamp denoting recommended time to trust data to.

Signing Timestamp by DIME (4 bytes):
    Current time at signing.

DIME Signature (64 bytes):
    Signature over preceding fields using the keypair of 
    the DIME.
~~~~
{:fig #b-axy-fig title="Example DRIP Broadcast Endorsement: DIME, UA"}

# Example TX/RX Flow {#appendix-c}

In this example the UA is sending all DRIP Authentication Message formats (DRIP Link, DRIP Wrapper and DRIP Manifest) during flight, along with standard ASTM Messages. The objective is to show the combinations of messages that must be received to properly validate a DRIP equipped UA and examples of their various states (as described in {{appendix-a}}).

~~~~
        +-------------------+
  .-----| Unmanned Aircraft |-----.
  |     +-------------------+     |
  | 1       | 2         | 3       | 4
  |         |           |         |

  O         O           O         O
--|--     --|--       --|--     --|--
 / \       / \         / \       / \
  A         B           C         D


Broadcast Paths: Messages Received
1: DRIP Link
2: DRIP Link and DRIP Wrapper or DRIP Manifest
3: DRIP Wrapper or DRIP Manifest
4: None

Observers: Authentication State
A: Unverifiable
B: Verified, Trusted, Unverified, Questionable, or Conflicting
C: Unverifiable
D: None
~~~~

As the above example shows to properly authenticate both a DRIP Link and a DRIP Wrapper or DRIP Manifest are required.

# FEC Examples

## Multiple Page: Page Recovery {#page-example}

The following example is an Authentication Message with 7 pages that 3 pages of parity are to be generated for. The first column is just the `Page Header` with a visual space here to show the boundary.

~~~~
50 098960bf8c05042001001000a00145aac6b00abba268b7
51 2001001000a0014579d8a404d48f2ef9bb9a4470ada5b4
52 ff1352c7402af9d9ebd20034e8d7a12920f4d7e91c1a73
53 dca7d04e776150825863c512c6eb075a206a95c59b297e
54 f2935fd416f27b1b42fd5d9dfaa0dec79f32287f41b454
55 7101415def153a770d3e6c0b17ae560809bc634a822c1f
56 3b1064b80a000000000000000000000000000000000000
~~~~

For Page Recovery the first column is ignored and the last 23-bytes of each page are extracted to have Reed Solomon performed on them in a column wise fashion to produce parity bytes. This can be considered a form of interleaving that takes advantage of the fixed page length. For the example the following 3-bytes of parity are generated with the first byte of each page:

~~~~
dc6c02 = ReedSolomon.encoder(0920ffdcf2713b)
~~~~

Each set of parity is the placed into a pseudo-frame as follows (each byte in its own message in the same column). Below is an example of the full parity generated and each 23-bytes of parity added into the additional pages as `Additional Data`:

~~~~
57 dc6657acd30b2ec4aa582049f52adf9f922e62c469563a
58 6c636a59145a55417a3895fd543f19e94200be4abc5e94
59 02bba5e28f5896d754caf50016a983993b149b5c9e6eeb
~~~~

## Multiple Page: Frame Recovery {#frame-example}

Below is an example of a number of messages. The first column is an additional ASTM Header that contain the Message Type; with a visual space for clarity. The last 24-bytes are the actual message contents; be it location information or an Authentication Page.

~~~~
10 42012001001000a0014579d8a404d48f2ef9000000000000
11 249600006efeb019ee111ed37a097a0948081c10ffff0000
12 50098960bf8c05042001001000a00145aac6b00abba268b7
12 512001001000a0014579d8a404d48f2ef9bb9a4470ada5b4
12 52ff1352c7402af9d9ebd20034e8d7a12920f4d7e91c1a73
12 53dca7d04e776150825863c512c6eb075a206a95c59b297e
12 54f2935fd416f27b1b42fd5d9dfaa0dec79f32287f41b454
12 557101415def153a770d3e6c0b17ae560809bc634a822c1f
12 563b1064b80a000000000000000000000000000000000000
13 0052656372656174696f6e616c2054657374000000000000
14 02c2ffb019322d1ed3010000c008e40700fc080000000000
15 004e2e4f5031323334353600000000000000000000000000
~~~~

A similar process is followed as in {{enc-page}}. Here every column of bytes has parity generated for it (even the ASTM Header). In the below example 5-bytes of parity are generated using the ASTM Header column:

~~~~
6c3f42b8a8 = ReedSolomon.encoder(101112121212121212131415)
~~~~

After doing this to all columns the following pseudo-frames would have been generated:

~~~~
6c86337bf7ab746f5d62bb7f8de954104b121585d3975f6e92
3f06c1bce165b0e25930d57a63c24f751145e1dd8dc115029b
42e9979580327a6a14d421c12a33aa2e1a2e517daaee581016
b8012a7b3964f7b2720d387bfa77e945556f1831cd477ef3a3
a85bb403aada89926fb8fc2a14a9caacb4ec2f3a6ed2d8e9f9
~~~~

These 25-byte chunks are now concatenated together and are placed in Authentication Pages, using the `Additional Data`, 23-bytes at a time. In the below figure the first column is the ASTM Header as before, the second column is the `Page Header` for each Authentication Page and then last column is the 23-bytes of data for each page.

~~~~
12 57 6c86337bf7ab746f5d62bb7f8de954104b121585d3975f
12 58 6e923f06c1bce165b0e25930d57a63c24f751145e1dd8d
12 59 c115029b42e9979580327a6a14d421c12a33aa2e1a2e51
12 5a 7daaee581016b8012a7b3964f7b2720d387bfa77e94555
12 5b 6f1831cd477ef3a3a85bb403aada89926fb8fc2a14a9ca
12 5c acb4ec2f3a6ed2d8e9f900000000000000000000000000
~~~~