---
coding: utf-8

title: DRIP Entity Tag Authentication Formats & Protocols for Broadcast Remote ID
abbrev: DRIP Auth Formats
docname: draft-ietf-drip-auth-47
category: std

ipr: trust200902
area: Internet
wg: DRIP Working Group
kw: Internet-Draft
cat: std

stand_alone: yes
pi: [toc, sortrefs, symrefs, comments]

author:

-   role: editor
    ins: A. Wiethuechter
    name: Adam Wiethuechter
    org: AX Enterprize, LLC
    street: 4947 Commercial Drive
    city: Yorkville
    region: NY
    code: 13495
    country: USA
    email: adam.wiethuechter@axenterprize.com
-   ins: S. Card
    name: Stuart Card
    org: AX Enterprize, LLC
    street: 4947 Commercial Drive
    city: Yorkville
    region: NY
    code: 13495
    country: USA
    email: stu.card@axenterprize.com
-   ins: R. Moskowitz
    name: Robert Moskowitz
    org: HTT Consulting
    street: ""
    city: Oak Park
    region: MI
    code: 48237
    country: USA
    email: rgm@labs.htt-consult.com

normative:
    # RFCs
    RFC9153:  # drip-requirements
    RFC9374:  # drip-rid
    RFC9434:  # drip-arch

    # External
    F3411:
      title: Standard Specification for Remote ID and Tracking
      author:
        - 
          org: ASTM International
      target: https://www.astm.org/f3411-22a.html
      date: July 2022
      seriesinfo:
        ASTM: F3411-22A
        DOI: 10.1520/F3411-22A

informative:
    # IETF Drafts
    drip-registries: I-D.ietf-drip-registries

    # RFCs
    RFC8126:  # iana-considerations
    RFC9364:  # DNSSEC
    
    # External Sources
    FAA-14CFR:
        title: Remote Identification of Unmanned Aircraft
        author:
        org: United States Federal Aviation Administration (FAA)
        target: https://www.govinfo.gov/content/pkg/FR-2021-01-15/pdf/2020-28948.pdf
        date: 2021-01
    ASTM-Remote-ID:
        title: ICAO Remote ID Number Registration
        author:
        org: International Civil Aviation Organization
        target: https://www.icao.int/airnavigation/IATF/Pages/ASTM-Remote-ID.aspx
        date: 2023-12

--- abstract

The Drone Remote Identification Protocol (DRIP), plus trust policies and periodic access to registries, augments Unmanned Aircraft System (UAS) Remote Identification (RID), enabling local real time assessment of trustworthiness of received RID messages and observed UAS, even by Observers then lacking Internet access. This document defines DRIP message types and formats to be sent in Broadcast RID Authentication Messages to verify that attached and recent detached messages were signed by the registered owner of the DRIP Entity Tag (DET) claimed.

--- middle

# Introduction

The initial regulations (e.g., {{FAA-14CFR}}) and standards (e.g., {{F3411}}) for Unmanned Aircraft (UA) Systems (UAS) Remote Identification and tracking (RID) do not address trust. However, this is a requirement that needs to be addressed for various different parties that have a stake in the safe operation of National Airspace Systems (NAS). Drone Remote ID Protocol's (DRIP's) goal is to specify how RID can be made trustworthy and available in both Internet and local-only connected scenarios, especially in emergency situations.

UAS often operate in a volatile environment. Small UA offer little capacity for computation and communication. UAS RID must also be accessible with ubiquitous and inexpensive devices without modification. This limits options. Most current small UAS are IoT devices even if not typically thought of as such. Thus many IoT considerations apply here. Some DRIP work, currently strongly scoped to UAS RID, is likely to be applicable to some other IoT use-cases.

Generally, two communication schemes for UAS RID are considered: Broadcast and Network. This document focuses on adding trust to Broadcast RID (Section 3.2 of {{RFC9153}} and Section 1.2.2 of {{RFC9434}}). As stated in {{RFC9434}}, Broadcast RID is a one-way RF transmission of MAC layer messages over Bluetooth or Wi-Fi.

Senders can make any claims the RID message formats allow. Observers have no standardized means to assess the trustworthiness of message content, nor verify whether the messages were sent by the UA identified therein, nor confirm that the UA identified therein is the one they are visually observing. Indeed, Observers have no way to detect whether the messages were sent by a UA, or spoofed by some other transmitter (e.g., a laptop or smartphone) anywhere in direct wireless broadcast range. Authentication is the primary strategy for mitigating this issue.

## DRIP Entity Tag (DET) Authentication Goals for Broadcast RID

ASTM {{F3411}} Authentication Messages (Message Type 0x2), when used with DRIP Entity Tag (DET) {{RFC9374}} based formats, enable a high level of trust that the content of other ASTM Messages was generated by their claimed registered source. These messages are designed to provide the Observers with trustworthy and immediately actionable information. {{auth-state-diagrams}} provides a high-level overview of the various states of trustworthiness that may be used along with these formats.

This authentication approach also provides some error correction ({{fec-details}}) as mandated by the United States (US) Federal Aviation Administration (FAA) {{FAA-14CFR}}, which is missing from {{F3411}} over Legacy Transports (Bluetooth 4.x).

These DRIP enhancements to ASTM's {{F3411}} further support the important use case of Observers who may be offline at the time of observation.

A summary of DRIP requirements {{RFC9153}} addressed herein is provided in {{req-sum}}.

> Note: The Endorsement (used in {{drip-link}}) that proves that a DET is registered MUST come from its immediate parent in the registration hierarchy, e.g., a DRIP Identity Management Entity (DIME) {{drip-registries}}. In the definitive hierarchy, the parent of the UA is its HHIT Domain Authority (HDA), the parent of an HDA is its Registered Assigning Authority (RAA), etc. It is also assumed that all DRIP-aware entities use a DET as their identifier during interactions with other DRIP-aware entities.

# Terminology {#terminology}

## Required Terminology

The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in BCP 14 {{!RFC2119}} {{!RFC8174}} when, and only when, they appear in all capitals, as shown here.

## Definitions

This document makes use of the terms (CAA, Observer, USS, UTM, etc.) defined in {{RFC9153}}. Other terms (such as DIME) are from {{RFC9434}}, while others (HI, DET, RAA, HDA, etc.) are from {{RFC9374}}.

In addition, the following terms are defined for this document:

Extended Transports:

> Use of extended advertisements (Bluetooth 5.x), service info (Wi-Fi Neighbor Awareness Networking (NAN)), or IEEE 802.11 Beacons with vendor specific information element as specified in {{F3411}}. Must use ASTM Message Pack (Message Type 0xF).

Legacy Transports:

> Use of broadcast frames (Bluetooth 4.x) as specified in {{F3411}}.

Manifest:

> an immutable list of items being transported (in this specific case over wireless communication).

# UAS RID Authentication Background & Procedures

## DRIP Authentication Protocol Description {#protocol-desc}

{{F3411}} defines Authentication Message framing only. It does not define authentication formats or methods. It explicitly anticipates several signature options but does not fully define those. Annex A1 of {{F3411}} defines a Broadcast Authentication Verifier Service, which has a heavy reliance on Observer real-time connectivity to the Internet. Fortunately, {{F3411}} also allows third party standard Authentication Types using Type 5 Specific Authentication Method (SAM), several of which DRIP defines herein.

The standardization of specific formats to support the DRIP requirements in UAS RID for trustworthy communications over Broadcast RID is an important part of the chain of trust for a UAS ID. Per Section 5 of {{RFC9434}}, Authentication formats are needed to relay information for Observers to determine trust. No existing formats (defined in {{F3411}} or other organizations leveraging this feature) provide the functionality to satisfy this goal resulting in the work reflected in this document.

Like most aviation matters, the overall objectives here are security and ultimately safety oriented. Since DRIP depends on DNS for some of its functions, DRIP usage of DNS needs to be protected in line with best security practices. Many participating nodes will have limited local processing power and/or poor, low bandwidth QoS paths. Appropriate and feasible security techniques will be highly UAS and Observer situation dependent. Therefore specification of particular DNS security options, transports, etc. is outside the scope of this document (see also {{dns-security}}).

### UA Signed Evidence {#ua-attestation}

When an Observer receives a DRIP-based Authentication Message ({{drip-wrapper}}, {{drip-manifest}}, or {{drip-frame}}) containing UA-signed Evidence (in an Endorsement structure {{bas}}) it MUST validate the signature using the Host Identity (HI) corresponding to the UA's DET {{RFC9374}}.

An Observer SHOULD query DNS for the UA's HI. If not available it may have been revoked. Note that accurate revocation status is a DIME inquiry; DNS non-response is a hint that a DET is expired or revoked. It MAY be retrieved from a local cache, if present. The local cache is typically populated by DNS lookups and/or by received Broadcast Endorsements ({{dime-attestation}}).

Once the Observer has the registered UA's DET and HI, all subsequent y received (or previously cached) DRIP-based Authentication Messages using the UA DET can be validated. Signed content, tied to the DET, can now be trusted to have been signed by the holder of the private key corresponding to the DET.

Whether the content is true is a separate question which DRIP cannot address, but sanity checks ({{reqs}}) are possible and encouraged.

### DIME Endorsements of Subordinate DET {#dime-attestation}

When an Observer receives a DRIP Link Authentication Message ({{drip-link}}) containing an Endorsement by the DIME of a child DET registration, it MUST validate the signature using the HI corresponding to the DIME's DET.

An Observer SHOULD query DNS for the DIME's HI (e.g., Section 5 of {{drip-registries}}), when able. It MAY be cached from a prior DNS lookup or be stored in a distinct local store.

### DIME Hierarchy Endorsements {#dime-hierarchy}

An Observer can receive a series of DRIP Link Authentication Messages ({{drip-link}}), each one pertaining to a DIME's registration in the DIME above it in the hierarchy. Similar to {{dime-attestation}}, each link in this chain MUST be validated.

### UAS RID Trust {#rid-trust}

{{ua-attestation}}, {{dime-attestation}}, and {{dime-hierarchy}} complete the trust chain for the claimed DET and associated HI (public key), but the chain cannot yet be trusted as having any relevance to the observed UA because replay attacks are trivial. At this point, the key nominally possessed by the UA is trusted but the UA has not yet been proven to possess that private key.

It is necessary for the UA to prove possession by dynamically signing data that is unique and unpredictable but easily verified by the Observer. This can be a DRIP Wrapper or Manifest ({{drip-wrapper}}, {{drip-manifest}}) containing an ASTM Message that fulfills the requirements. Verification of this signed data MUST be performed by the Observer as part of the received UAS RID information trust assessment ({{trust-assessment}}).

## ASTM Authentication Message Framing {#auth-message}

The Authentication Message (Message Type 0x2) is unique in the ASTM {{F3411}} Broadcast standard as it is the only message that can be larger than the Legacy Transport size. To address this limitation around transport size, it is defined as a set of "pages", each of which fits into a single Legacy Transport frame. For Extended Transports, pages are still used but all are in a single frame.

> Informational Note: Message Pack (Message Type 0xF) is also larger than the Legacy Transport size but is limited for use only on Extended Transports where is can be supported.

The following sub-sections are a brief overview of the Authentication Message format defined in {{F3411}} for better context on how DRIP Authentication fills and uses various fields already defined by ASTM {{F3411}}.

### Authentication Page {#auth-page}

This document leverages Authentication Type 0x5, Specific Authentication Method (SAM), as the principal authentication container, defining a set of SAM Types in {{drip-authentication-formats}}. Authentication Type is encoded in every Authentication Page in the `Page Header`. The SAM Type is defined as a field in the `Authentication Payload` (see {{sam-data}}).

{:fig: artwork-align="center"}
~~~~
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+---------------+---------------+---------------+---------------+
|  Page Header  |                                               |
+---------------+                                               |
|                                                               |
|                                                               |
|                     Authentication Payload                    |
|                                                               |
|                                                               |
+---------------+---------------+---------------+---------------+
~~~~
{:fig #astm-auth-page title="Standard ASTM Authentication Message Page"}

Page Header: (1 octet)

> Authentication Type (4 bits) and Page Number (4 bits)
  
Authentication Payload: (23 octets per page)

> Authentication Payload, including headers. Null padded. See {{auth-payload}}.

The Authentication Message is structured as a set of pages per {{astm-auth-page}}. There is a technical maximum of 16 pages (indexed 0 to 15) that can be sent for a single Authentication Message, with each page carrying a maximum 23 octet `Authentication Payload`. See {{drip-restrictions}} for more details. Over Legacy Transports, these messages are "fragmented", with each page sent in a separate Legacy Transport frame.

Either as a single Authentication Message or a set of fragmented Authentication Message Pages, the structure is further wrapped by outer ASTM framing and the specific link framing.

### Authentication Payload Field {#auth-payload}

{{astm-auth}} is the source data view of the data fields found in the Authentication Message as defined by {{F3411}}. This data is placed into {{astm-auth-page}}'s `Authentication Payload`, spanning multiple `Authentication Pages`.

~~~~
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+---------------+---------------+---------------+---------------+
|                     Authentication Headers                    |
|                               +---------------+---------------+
|                               |                               |
+---------------+---------------+                               |
.                                                               .
.                Authentication Data / Signature                .
.                                                               .
|                                                               |
+---------------+---------------+---------------+---------------+
|      ADL      |                                               |
+---------------+                                               |
.                                                               .
.                       Additional Data                         .
.                                                               .
|                                                               |
+---------------+---------------+---------------+---------------+
~~~~
{:fig #astm-auth title="ASTM Authentication Message Fields"}

Authentication Headers: (6 octets)

> As defined in {{F3411}}.

Authentication Data / Signature: (0 to 255 octets)

> Opaque authentication data. The length of this payload is known through a field in the `Authentication Headers` (defined in {{F3411}}).

Additional Data Length (ADL): (1 octet - unsigned)

> Length in octets of `Additional Data`. The value of `ADL` is calculated as the minimum of `361 - Authentication Data / Signature Length` and `255`. Only present with `Additional Data`.

Additional Data: (`ADL` octets)

> Data that follows the `Authentication Data / Signature` but is not considered part of the `Authentication Data` thus is not covered by a signature. For DRIP, this field is used to carry Forward Error Correction (FEC) generated by transmitters and parsed by receivers as defined in {{fec-details}}.

### Specific Authentication Method (SAM)

#### SAM Data Format {#sam-data}

{{sam-frame}} is the general format to hold authentication data when using SAM and is placed inside the `Authentication Data/Signature` field in {{astm-auth}}.

~~~~
0                   1                   2                   3
0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+---------------+---------------+---------------+---------------+
|   SAM Type    |                                               |
+---------------+                                               |
.                                                               .
.                     SAM Authentication Data                   .
.                                                               .
|                                                               |
+---------------+---------------+---------------+---------------+
~~~~
{:fig #sam-frame title="SAM Data Format"}

SAM Type: (1 octet)

> The following SAM Types are allocated to DRIP:

| SAM Type | Description                       |
| -------- | --------------------------------- |
| 0x01     | DRIP Link ({{drip-link}})         |
| 0x02     | DRIP Wrapper ({{drip-wrapper}})   |
| 0x03     | DRIP Manifest ({{drip-manifest}}) |
| 0x04     | DRIP Frame ({{drip-frame}})       |
{: title="DRIP SAM Types"}

> Note: ASTM International is the owner of these code points as they are defined in {{F3411}}. In accordance with Annex 5 of the ASTM's {{F3411}}, the International Civil Aviation Organization (ICAO) has been selected by ASTM as the registrar to manage allocations of these code points. The list of which can be found at {{ASTM-Remote-ID}}.

SAM Authentication Data: (0 to 200 octets)

> Contains opaque authentication data formatted as defined by the preceding SAM Type.

### ASTM Broadcast RID Constraints {#drip-restrictions}

#### Wireless Frame Constraints

A UA has the option of broadcasting using Bluetooth (4.x and 5.x), Wi-Fi NAN, or IEEE 802.11 Beacon, see {{reqs}}. With Bluetooth, FAA and other Civil Aviation Authorities (CAA) mandate transmitting simultaneously over both 4.x and 5.x. The same application layer information defined in {{F3411}} MUST be transmitted over all the physical layer interfaces performing the function of RID. This is because Observer devices transports may be limited. If an Observer can support multiple transports it should be assumed to use the latest data regardless of transport received over.

Bluetooth 4.x presents a payload size challenge in that it can only transmit 25 octets of payload per frame while other transports can support larger payloads per frame. However, the {{F3411}} messaging framing dictated by Bluetooth 4.x constraints is inherited by {{F3411}} over other media.

It should be noted that Extended Transports by definition have Error Correction built in, unlike Legacy Transports. For Authentication Messages this means that over Legacy Transport pages could be not received by Observers resulting in incomplete messages during operation, even with the use of FEC ({{fec-details}}). Authentication Messages sent using Extended Transports due not suffer this issue as the full message (all pages) are sent using a single Message Pack. Furthermore the use of one-way RF broadcasts prohibits the use of any congestion control or loss recovery schemes that require peer to peer negotiation.

#### Paged Authentication Message Constraints

To keep consistent formatting across the different transports (Legacy and Extended) and their independent restrictions, the authentication data being sent is REQUIRED to fit within the page limit that the most constrained existing transport can support. Under Broadcast RID, the Extended Transport that can hold the least amount of authentication data is Bluetooth 5.x at 9 pages.

As such DRIP transmitters are REQUIRED to adhere to the following when using the Authentication Message:

1. `Authentication Data / Signature` data MUST fit in the first 9 pages (Page Numbers 0 through 8).
2. The `Length` field in the `Authentication Headers` (which encodes the length in octets of `Authentication Data / Signature` only) MUST NOT exceed the value of 201. This includes the SAM Type but excludes `Additional Data`.

#### Timestamps {#astm-timestamps}

In ASTM {{F3411}} timestamps are a Unix-style timestamp with an epoch of `2019-01-01 00:00:00 UTC`. For DRIP this format is adopted for Authentication to keep a common time format in Broadcast payloads.

Under DRIP there are two timestamps defined `Valid Not Before (VNB)` and `Valid Not After (VNA)`.

Valid Not Before (VNB) Timestamp: (4 octets)

> Timestamp denoting recommended time to start trusting data in. MUST follow the format defined in {{F3411}} as described above. MUST be set no earlier than the time the signature (across a given structure) is generated.

Valid Not After (VNA) Timestamp: (4 octets)

> Timestamp denoting recommended time to stop trusting data. MUST follow the format defined in {{F3411}} as described above. Has an additional offset to push a short time into the future (relative to `VNB`) to avoid replay attacks. The exact offset is not defined in this document. Best practice identifying an acceptable offset should be used taking into consideration the UA environment, and propagation characteristics of the messages being sent, and clock differences between the UA and Observers. A reasonable time would be to set `VNA` 2 minutes after `VNB`.

# DRIP Authentication Formats

All formats defined in this section are the content of the `Authentication Data / Signature` field in {{astm-auth}} and use the Specific Authentication Method (SAM, Authentication Type 0x5). The first octet of the `Authentication Data / Signature` of {{astm-auth}} is used to multiplex among these various formats.

When sending data over a medium that does not have underlying FEC, for example Legacy Transports, then {{fec-details}} MUST be used.

Examples of Link, Wrapper and Manifest are shown as part of an operational schedule in {{raw-example}}.

## Endorsement Structure for UA Signed Evidence {#bas}

The `Endorsement Structure for UA Signed Evidence` ({{drip-data}}) is used by the UA during flight to sign over information elements using the private key associated with the current UA DET. It is encapsulated by the `SAM Authentication Data` field of {{sam-frame}}.

This structure is used by the DRIP Wrapper ({{drip-wrapper}}), Manifest {{drip-manifest}}, and Frame ({{drip-frame}}). DRIP Link ({{drip-link}}) MUST NOT use it as it will not fit in the ASTM Authentication Message with its intended content (i.e., a Broadcast Endorsement).

~~~~
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+---------------+---------------+---------------+---------------+
|                      VNB Timestamp by UA                      |
+---------------+---------------+---------------+---------------+
|                      VNA Timestamp by UA                      |
+---------------+---------------+---------------+---------------+
|                                                               |
.                                                               .
.                            Evidence                           .
.                                                               .
|                                                               |
+---------------+---------------+---------------+---------------+
|                                                               |
|                              UA                               |
|                        DRIP Entity Tag                        |
|                                                               |
+---------------+---------------+---------------+---------------+
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                          UA Signature                         |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
+---------------+---------------+---------------+---------------+
~~~~
{:fig #drip-data title="Endorsement Structure for UA Signed Evidence"}

Valid Not Before (VNB) Timestamp by UA: (4 octets)

> See {{astm-timestamps}}. Set by the UA.

Valid Not After (VNA) Timestamp by UA: (4 octets)

> See {{astm-timestamps}}. Set by the UA.

Evidence: (0 to 112 octets)

> The `evidence` section MUST be filled in with data in the form of an opaque object specified in the DRIP Wrapper ({{drip-wrapper}}), Manifest ({{drip-manifest}}), or Frame ({{drip-frame}}).

UA DRIP Entity Tag: (16 octets)

> This is the current DET {{RFC9374}} being used by the UA assumed to be a Specific Session ID (a type of UAS ID).

UA Signature: (64 octets)

> Signature over concatenation of preceding fields (`VNB`, `VNA`, `Evidence`, and `UA DET`) using the keypair of the UA DET. The signature algorithm is specified by the HHIT Suite ID of the DET.

When using this structure, the UA is minimally self-endorsing its DET. The HI of the UA DET can be looked up by mechanisms described in {{drip-registries}} or by extracting it from a Broadcast Endorsement (see {{drip-link}} and {{drip-recommendations}}).

## DRIP Link

This SAM Type is used to transmit Broadcast Endorsements. For example, the `Broadcast Endorsement: HDA, UA` is sent (see {{drip-recommendations}}) as a DRIP Link message.

> Note: For the remainder of this document `Broadcast Endorsement: Parent, Child` will be abbreviated to `BE: Parent, Child`.

DRIP Link is important as its contents are used to provide trust in the DET/HI pair that the UA is currently broadcasting. This message does not require Internet connectivity to perform signature verification of the contents when the DIME DET/HI is in the receiver's cache. It also provides the UA HI, when it is filled with a `BE: HDA, UA`, so that connectivity is not required when performing signature verification of other DRIP Authentication Messages.

Various Broadcast Endorsements are sent during operation to ensure that the full Broadcast Endorsement chain is available offline. See {{drip-recommendations}} for further details.

~~~~
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+---------------+---------------+---------------+---------------+
|                    VNB Timestamp by Parent                    |
+---------------+---------------+---------------+---------------+
|                    VNA Timestamp by Parent                    |
+---------------+---------------+---------------+---------------+
|                                                               |
|                              DET                              |
|                            of Child                           |
|                                                               |
+---------------+---------------+---------------+---------------+
|                                                               |
|                                                               |
|                                                               |
|                           HI of Child                         |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
+---------------+---------------+---------------+---------------+
|                                                               |
|                              DET                              |
|                           of Parent                           |
|                                                               |
+---------------+---------------+---------------+---------------+
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                     Signature by Parent                       |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
+---------------+---------------+---------------+---------------+
~~~~
{:fig #link-fig title="Broadcast Endorsement / DRIP Link"}

VNB Timestamp by Parent: (4 octets)

> See {{astm-timestamps}}. Set by Parent Entity.

VNA Timestamp by Parent: (4 octets)

> See {{astm-timestamps}}. Set by Parent Entity.

DET of Child: (16 octets)

> DRIP Entity Tag of Child Entity.

HI of Child: (32 octets)

> Host Identity of Child Entity.

DET of Parent: (16 octets)

> DRIP Entity Tag of Parent Entity in DIME Hierarchy.

Signature by Parent: (64 octets)

> Signature over concatenation of preceding fields (`VNB`, `VNA`, `DET of Child`, `HI of Child`, and `DET of Parent`) using the keypair of the Parent DET.

This DRIP Authentication Message is used in conjunction with other DRIP SAM Types (such as the Manifest or the Wrapper) that contain data (e.g., the ASTM Location/Vector Message, Message Type 0x2) that is guaranteed to be unique, unpredictable, and easily cross-checked by the receiving device.

A hash of the final link (`BE: HDA on UA`) in the Broadcast Endorsement chain MUST be included in each DRIP Manifest {{drip-manifest}}.

## DRIP Wrapper

This SAM Type is used to wrap and sign over a list of other {{F3411}} Broadcast RID messages.

The `evidence` section of the `Endorsement Structure for UA Signed Evidence` ({{bas}}) is populated with up to four ASTM {{F3411}} Messages in a contiguous octet sequence. Only ASTM Message Types 0x0, 0x1, 0x3, 0x4, and 0x5 are allowed and must be in Message Type order as defined by {{F3411}}. These messages MUST include the Message Type and Protocol Version octet and MUST NOT include the Message Counter octet (thus are fixed at 25 octets in length).

### Wrapped Count & Sanity Check

When decoding a DRIP Wrapper on a receiver, a calculation of the number of messages wrapped and a sanity check MUST be performed by using the number of octets (defined as `wrapperLength`) between the `VNA Timestamp by UA` and the `UA DET` as shown in {{wrapper-check}}.

~~~~
<CODE BEGINS>

if (wrapperLength MOD 25) != 0 {
  return DECODE_FAILURE;
}
wrappedCount = wrapperLength / 25;
if (wrappedCount == 0) {
  // DECODE_SUCCESS; treat DRIP Wrapper over extended transport
}
else if (wrappedCount > 4) {
  return DECODE_FAILURE;
} else {
  // DECODE_SUCCESS; treat as standard DRIP Wrapper
}

<CODE ENDS>
~~~~
{: #wrapper-check title="Pseudo-code for Wrapper sanity check and number of messages calculation"}

### Wrapper over Extended Transports {#extended-wrapper}

When using Extended Transports an optimization can be made to DRIP Wrapper to sign over co-located data in an ASTM Message Pack (Message Type 0xF).

To perform this optimization the `Endorsement Structure for UA Signed Evidence` is filled with the ASTM Messages to be in the ASTM Message Pack, the signature is generated, then the `evidence` field is cleared leaving the encoded form shown in {{set-sig}}.

~~~~
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+---------------+---------------+---------------+---------------+
|                      VNB Timestamp by UA                      |
+---------------+---------------+---------------+---------------+
|                      VNA Timestamp by UA                      |
+---------------+---------------+---------------+---------------+
|                                                               |
|                              UA                               |
|                        DRIP Entity Tag                        |
|                                                               |
+---------------+---------------+---------------+---------------+
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                          UA Signature                         |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
+---------------+---------------+---------------+---------------+
~~~~
{:fig #set-sig title="DRIP Wrapper over Extended Transports"}

To verify the signature, the receiver MUST concatenate all the messages in the Message Pack (excluding Authentication Message found in the same Message Pack) in ASTM Message Type order and set the `evidence` section of the `Endorsement Structure for UA Signed Evidence` before performing signature verification.

The functionality of a Wrapper in this form is equivalent to Message Set Signature (Authentication Type 0x3) when running over Extended Transports. What the Wrapper provides is the same format but over both Extended and Legacy Transports allowing the transports to be similar. Message Set Signature also implies using the ASTM validator system architecture which depends on Internet connectivity for verification which the receiver may not have at the time of receipt of an Authentication Message. This is something the Wrapper, and all DRIP Authentication Formats, avoid when the UA key is obtained via a DRIP Link Authentication Message.

### Wrapper Limitations

The primary limitation of the Wrapper is the bounding of up to 4 ASTM Messages that can be sent within it. Another limitation is that the format cannot be used as a surrogate for messages it is wrapping due to the potential that a receiver on the ground does not support DRIP. Thus, when a Wrapper is being used, the wrapped data must effectively be sent twice, once as a single framed message (as specified in {{F3411}}) and then again within the Wrapper.

## DRIP Manifest

This SAM Type is used to create message manifests that contain hashes of previously sent ASTM Messages.

By hashing previously sent messages and signing them, we gain trust in a UA's previous reports without re-transmitting them. This is a way to evade the limitation of a maximum of 4 messages in the Wrapper ({{wrapper-limitations}}) and greatly reduce overhead.

Observers that support decoding of Manifest MUST hash all received ASTM Messages and cross-check them against hashes in received Manifests.

Judicious use of a Manifest enables an entire Broadcast RID message stream to be strongly authenticated with less than 100% overhead relative to a completely unauthenticated message stream (see {{drip-recommendations}} and {{operational-proof}}).

The `evidence` section of the `Endorsement Structure for UA Signed Evidence` ({{bas}}) is populated with 8-octet hashes of {{F3411}} Broadcast RID messages (up to 11) and three special hashes ({{block-hashes}}). All these hashes MUST be concatenated to form a contiguous octet sequence in the `evidence` section. It is RECOMMENDED the max number of ASTM Message Hashes be used is 10 (see {{eleven-astm-messages}}).

The `Previous Manifest Hash`, `Current Manifest Hash`, and `DRIP Link (BE: HDA, UA) Hash` MUST always come before the `ASTM Message Hashes` as seen in {{manifest-fig}}.

A receiver MUST use the Manifest to verify each ASTM Message hashed therein that it has previously received. It can do this without having received them all. A Manifest SHOULD typically encompass a single transmission cycle of messages being sent, see {{operational-recommendations}} and {{operational-proof}}.

~~~~
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+---------------+---------------+---------------+---------------+
|                       Previous Manifest                       |
|                              Hash                             |
+---------------+---------------+---------------+---------------+
|                       Current Manifest                        |
|                              Hash                             |
+---------------+---------------+---------------+---------------+
|                      DRIP Link (BE: HDA, UA)                  |
|                              Hash                             |
+---------------+---------------+---------------+---------------+
|                                                               |
.                                                               .
.                      ASTM Message Hashes                      .
.                                                               .
|                                                               |
+---------------+---------------+---------------+---------------+
~~~~
{:fig #manifest-fig title="DRIP Manifest Evidence Structure"}

Previous Manifest Hash: (8 octets)

> Hash of the previously sent Manifest Message.

Current Manifest Hash: (8 octets)

> Hash of the current Manifest Message.

DRIP Link (BE: HDA, UA): (8 octets)

> Hash of the DRIP Link Authentication Message carrying `BE: HDA, UA` (see {{drip-link}}).

ASTM Message Hash: (8 octets)

> Hash of a single full ASTM Message using hash operations described in {{hash-op}}.

### Hash Count & Sanity Check

When decoding a DRIP Manifest on a receiver, a calculation of the number of hashes and a sanity check can be performed by using the number of octets (defined as `manifestLength`) between the `UA DET` and the `VNB Timestamp by UA` such as shown in {{manifest-check}}.

~~~~
<CODE BEGINS>

if (manifestLength MOD 8) != 0 {
  return DECODE_FAILURE
}
hashCount = (manifestLength / 8) - 3;

<CODE ENDS>
~~~~
{: #manifest-check title="Pseudo-code for Manifest Sanity Check and Number of Hashes Calculation"}

### Manifest Ledger Hashes {#block-hashes}

Three special hashes are included in all Manifests. The `Previous Manifest Hash`, links to the previous Manifest, and the `Current Manifest Hash` which is the currently filled Manifest. These two hashes act as a ledger of provenance to the Manifest that could be traced back if the Observer was present for extended periods of time.

The `DRIP Link (BE: HDA, UA)` is included so there is a direct signature by the UA over the Broadcast Endorsement (see {{drip-link}}).

### Hash Algorithms and Operation {#hash-op}

The hash algorithm used for the Manifest is the same hash algorithm used in creation of the DET {{RFC9374}} that is signing the Manifest. This is encoded as part of the DET using the HHIT Suite ID.

DET's using cSHAKE128 {{!NIST.SP.800-185}} compute the hash as follows:

~~~~
cSHAKE128(ASTM Message, 64, "", "Remote ID Auth Hash")
~~~~

For OGAs other than "5" {{RFC9374}}, use the construct appropriate for the associated hash. For example, for "2" which is ECDSA/SHA-384:

~~~~
Ltrunc( SHA-384( ASTM Message | "Remote ID Auth Hash" ), 8 )
~~~~

When building the list of hashes, the `Previous Manifest Hash` is known from the previous Manifest. For the first built Manifest this value is filled with a random nonce. The `Current Manifest Hash` is null filled while ASTM Messages are hashed and fill the `ASTM Messages Hashes` section. When all messages are hashed, the `Current Manifest Hash` is computed over the `Previous Manifest Hash`, `Current Manifest Hash` (null filled) and `ASTM Messages Hashes`. This hash value replaces the null filled `Current Manifest Hash` and becomes the `Previous Manifest Hash` for the next Manifest.

#### Legacy Transport Hashing

Under this transport DRIP hashes the full ASTM Message being sent over the Bluetooth Advertising frame. This is the 25-octet object start with the Message Type and Protocol Version octet along with the 24 octets of message data. The hash MUST NOT included the Message Counter octet.

For paged ASTM Messages (currently only Authentication Messages) all the pages are concatenated together in Page Number order and hashed as one object.

#### Extended Transport Hashing

Under this transport DRIP hashes the full ASTM Message Pack (Message Type 0xF) regardless of its content. The hash MUST NOT included the Message Counter octet.

## DRIP Frame

This SAM Type is defined to enable the use of {{bas}} in the future beyond the previously defined formats (Wrapper and Manifest) by the inclusion of a single octet to signal the format of `evidence` data (up to 111 octets).

The content format of `Frame Evidence Data` is not defined in this document. Other specifications MUST define the contents and register for a `Frame Type`. At the time of publication there are no defined Frame Types other than an Experimental range.

Observers MUST check the signature of the structure ({{bas}}) per {{ua-attestation}} and MAY, if the specification of `Frame Type` is known, parse the content in `Frame Evidence Data`.

~~~~
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+---------------+---------------+---------------+---------------+
|  Frame Type   |                                               |
+---------------+                                               .
.                      Frame Evidence Data                      .
.                                                               .
|                                                               |
+---------------+---------------+---------------+---------------+
~~~~
{:fig #frame-fig title="DRIP Frame"}

Frame Type: (1 octet)

> Byte to sub-type for future different DRIP Frame formats. It takes the first octet in {{frame-fig}}, leaving 111 octets available for `Frame Evidence Data`. See {{iana-drip-registry}} for Frame Type allocations.

# Forward Error Correction {#fec-details}

For Broadcast RID, FEC is provided by the lower layers in Extended Transports. The Bluetooth 4.x Legacy Transport does not have supporting FEC, so with DRIP Authentication the following application level scheme is used to add some FEC. When sending data over a medium that does not have underlying FEC, for example Bluetooth 4.x, then this section MUST be used.

The Bluetooth 4.x lower layers have error detection but not correction. Any frame in which Bluetooth detects an error is dropped and not delivered to higher layers (in our case, DRIP). Thus it can be treated as an erasure.

DRIP standardizes a single page FEC scheme using XOR parity across all page data of an Authentication Message. This allows the correction of single erased page in an Authentication Message. If more than a single page is missing then handling of an incomplete Authentication Message is determined by higher layers.

Other FEC schemes, to protect more than a single page of an Authentication Message or multiple {{F3411}} Messages, is left for future standardization if operational experience proves it necessary and/or practical.

The data added during FEC is not included in the `Authentication Data / Signature`, but instead in the `Additional Data` field of {{astm-auth}}. This may cause the Authentication Message to exceed 9-pages, up to a maximum of 16-pages.

## Encoding {#enc-single-page}

When encoding two things are REQUIRED:

1. The FEC data MUST start on a new Authentication Page. To do this, the results of parity encoding MUST be placed in the `Additional Data` field of {{astm-auth}} with null padding before it to line up with the next page. The `Additional Data Length` field MUST be set to `number of padding octets + number of parity octets`.
2. The `Last Page Index` field (in Page 0) MUST be incremented from what it would have been without FEC by the number of pages required for the `Additional Data Length` field, null padding and FEC.

To generate the parity, a simple XOR operation using the previous parity page and current page is used. Only the 23-octet `Authentication Payload` field of {{astm-auth-page}} is used in the XOR operations. For Page 0, a 23-octet null pad is used for the previous parity page.

{{fig-single-fec}} shows an example of the last two pages (out of N) of an Authentication Message using DRIP Single Page FEC. The `Additional Data Length` is set to 33 as there are always 23 octets of FEC data and in this example 10 octets of padding to line it up into Page N.

~~~~
Page N-1:
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+---------------+---------------+---------------+---------------+
|  Page Header  |                                               |
+---------------+                                               |
|                Authentication Data / Signature                |
|                                                               |
|               +---------------+---------------+---------------+
|               |    ADL=33     |                               |
+---------------+---------------+                               |
|                          Null Padding                         |
|                                                               |
+---------------+---------------+---------------+---------------+

Page N:
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+---------------+---------------+---------------+---------------+
|  Page Header  |                                               |
+---------------+                                               |
|                                                               |
|                     Forward Error Correction                  |
|                                                               |
|                                                               |
|                                                               |
+---------------+---------------+---------------+---------------+
~~~~
{:fig #fig-single-fec title="Example Single Page FEC Encoding"}

## Decoding {#dec-single-page}

Frame decoding is independent of the transmit media. However the decoding process can determine from the first Authentication page that there may be a Bluetooth 4.x FEC page at the end. The decoding process MUST test for the presence of FEC and apply it as follows.

To determine if FEC has been used, a check of the `Last Page Index` is performed. In general if the `Last Page Index` field is one greater than that necessary to hold `Length` octets of Authentication Data then FEC has been used. Note that if `Length` octets are exhausted exactly at the end of an Authentication Page, the `Additional Data Length` field will occupy the first octet of the following page. The remainder of this page will be null padded under DRIP to align the FEC to its own page. In this case the `Last Page Index` will have been incremented once for initializing the `Additional Data Length` field and once for FEC page, for a total of two additional pages, as in the last row of {{tbl-page-counts}}.

To decode FEC in DRIP, a rolling XOR is used on each `Authentication Page` received in the current `Authentication Message`. A Message Counter, outside of the ASTM Message but specified in {{F3411}}, is used to signal a different `Authentication Message` and to correlate pages to messages. This Message Counter is only single octet in length, so it will roll over (to 0x00) after reaching its maximum value (0xFF). If only a single page is missing in the `Authentication Message` the resulting parity octets should be the data of the erased page.

Authentication Page 0 contains various important fields, only located on that page, that help decode the full ASTM Authentication Message. If Page 0 has been reconstructed, the `Last Page Index` and `Length` fields MUST be sanity checked by DRIP. The pseudo-code in {{decode-pseudo}} can be used for both checks.

~~~~
<CODE BEGINS>

function decode_check(auth_pages[], decoded_lpi, decoded_length) {
  // check decoded_lpi does not exceed maximum value
  if (decoded_lpi >= 16) {
    return DECODE_FAILURE
  }
  
  // check that decoded length does not exceed DRIP maximum value
  if (decoded_length > 201) {
    return DECODE_FAILURE
  }

  // grab the page at index where length ends and extract its data
  auth_data = auth_pages[(decoded_length - 17) / 23].data
  // find the index of last auth byte
  last_auth_byte = (17 + (23 * last_auth_page)) - decoded_length

  // look for non-nulls after the last auth byte
  if (auth_data[(last_auth_byte + 2):] has non-nulls) {
    return DECODE_FAILURE
  }

  // check that byte directly after last auth byte is null
  if (auth_data[last_auth_byte + 1] equals null) {
    return DECODE_FAILURE
  }

  // we set our presumed Additional Data Length (ADL)
  presumed_adl = auth_data[last_auth_byte + 1]
  // use the presumed ADL to calculate a presumed LPI
  presumed_lpi = (presumed_adl + decoded_length - 17) / 23

  // check that presumed LPI and decoded LPI match
  if (presumed_lpi not equal decoded_lpi) {
    return DECODE_FAILURE
  }
  return DECODE_SUCCESS
}

<CODE ENDS>
~~~~
{: #decode-pseudo title="Pseudo-code for Decode Checks"}

## FEC Limitations

The worst-case scenario is when the `Authentication Data / Signature` ends perfectly on a page (Page N-1). This means the `Additional Data Length` would start the next page (Page N) and have 22 octets worth of null padding to align the FEC to begin at the start of the next page (Page N+1). In this scenario, an entire page (Page N) is being wasted just to carry the `Additional Data Length`.

# Requirements & Recommendations {#reqs}

## Legacy Transports

Under DRIP, the goal is to attempt to bring reliable receipt of the paged Authentication Message using Legacy Transports. FEC ({{fec-details}}) MUST be used, per mandated RID rules (for example the US FAA RID Rule {{FAA-14CFR}}), when using Legacy Transports (such as Bluetooth 4.x).

Under {{F3411}}, Authentication Messages are transmitted at the static rate (at least every 3 seconds). Any DRIP Authentication Messages containing dynamic data (such as the DRIP Wrapper) MAY be sent at the dynamic rate (at least every 1 second).

## Extended Transports

Under the ASTM specification, Extended Transports of RID must use the Message Pack (Message Type 0xF) format for all transmissions. Under Message Pack, ASTM Messages are sent together (in Message Type order) in a single frame (up to 9 single frame equivalent messages under Legacy Transports). Message Packs are required by {{F3411}} to be sent at a rate of 1 per second (like dynamic messages).

Message Packs are sent only over Extended Transports that provide FEC. Thus, the DRIP decoders will never be presented with a Message Pack from which a constituent Authentication Page has been dropped; DRIP FEC could never provide a benefit to a Message Pack, only consume its precious payload space. Therefore, DRIP FEC ({{fec-details}}) MUST NOT be used in Message Packs.

## Authentication {#drip-recommendations}

To fulfill the requirements in {{RFC9153}}, a UA:

1. MUST: send DRIP Link ({{drip-link}}) using the `BE: Apex, RAA` (satisfying GEN-3); at least once per 5 minutes. Apex in this context is the DET prefix owner
2. MUST: send DRIP Link ({{drip-link}}) using the `BE: RAA, HDA` (satisfying GEN-3); at least once per 5 minutes
3. MUST: send DRIP Link ({{drip-link}}) using the `BE: HDA, UA` (satisfying ID-5, GEN-1 and GEN-3); at least once per minute
4. MUST: send any other DRIP Authentication Format (non-DRIP Link) where the UA is dynamically signing data that is guaranteed to be unique, unpredictable and easily cross checked by the receiving device (satisfying ID-5, GEN-1 and GEN-2); at least once per 5 seconds

## Operational {#operational-recommendations}

UAS operation may impact the frequency of sending DRIP Authentication messages. When a UA dwells at an approximate location, and the channel is heavily used by other devices, less frequent message authentication may be effective (to minimize RF packet collisions) for an Observer. Contrast this with a UA transiting an area, where authenticated messages SHOULD be sufficiently frequent for an Observer to have a high probability of receiving an adequate number for validation during the transit.

A RECOMMENDED operational configuration (in alignment with {{drip-recommendations}}) with reasoning can be found in {{operational-proof}}. It consists of the following recommendations for every second:

- Under Legacy Transport:
  - Two sets of those ASTM Messages required by a CAA in its jurisdiction (example: Basic ID, Location and System) and one set of other ASTM Messages (example: Self ID, Operator ID)
  - An FEC protected DRIP Manifest enabling authentication of those ASTM Messages sent
  - A single page of an FEC protected DRIP Link
- Under Extended Transport:
  - A Message Pack of ASTM Messages (up to 4) and a DRIP Wrapper (per {{extended-wrapper}})
  - A Message Pack of a DRIP Link

### DRIP Wrapper {#wrapper-operations}

If DRIP Wrappers are sent, they MUST be sent in addition to any required ASTM Messages in a given jurisdiction. An implementation MUST NOT send DRIP Wrappers in place of any required ASTM Messages it may encapsulate. Thus, messages within a Wrapper are sent twice: once in the clear and once authenticated within the Wrapper.

The DRIP Wrapper has a specific use case for DRIP aware receivers. For a receiver plotting Location Messages (Message Type 0x2) on a map, display an embedded Location Message in a DRIP Wrapper can be marked differently (e.g., via color) to signify trust in the Location data.

### UAS RID Trust Assessment {#trust-assessment}

As described in {{rid-trust}}, the receiver MUST perform validation of the data being received in Broadcast RID. This is because trust in a key is different from trust that an observed UA possesses that key.

A chain of DRIP Links provides trust in a key. A message containing rapidly changing, not predictable far in advance (relative to typical operational flight times) but sanity-checkable data, signed by that key, provides trust that some agent with access to that data also possesses that key. If the sanity check involves correlating physical world observations of the UA with claims in that data, then the probability is high that the observed UA is (or is collaborating with or observed in real time by) the agent with the key.

After signature verification of any DRIP Authentication Message containing UAS RID information elements (e.g., DRIP Wrapper {{drip-wrapper}}) the Observer MUST use other sources of information to correlate against and perform validation. An example of another source of information is a visual confirmation of the UA position.

When correlation of these different data streams does not match in acceptable thresholds, the data SHOULD be rejected as if the signature failed to validate. Acceptable thresholds limits and what happens after such a rejection are out of scope for this document.

# Summary of Addressed DRIP Requirements {#req-sum}

The following {{RFC9153}} requirements are addressed in this document:

ID-5: Non-spoofability

> Addressed using the DRIP Wrapper ({{drip-wrapper}}), DRIP Manifest ({{drip-manifest}}) or DRIP Frame ({{drip-frame}}).

GEN-1: Provable Ownership

> Addressed using the DRIP Link ({{drip-link}}) and DRIP Wrapper ({{drip-wrapper}}), DRIP Manifest ({{drip-manifest}}) or DRIP Frame ({{drip-frame}}).

GEN-2: Provable Binding

> Addressed using the DRIP Wrapper ({{drip-wrapper}}), DRIP Manifest ({{drip-manifest}}) or DRIP Frame ({{drip-frame}}).

GEN-3: Provable Registration

> Addressed using the DRIP Link ({{drip-link}}).

# IANA Considerations

## IANA DRIP Registry

This document requests two new registries, for DRIP SAM Type and DRIP Frame Type, under the [DRIP registry group](https://www.iana.org/assignments/drip/drip.xhtml).

DRIP SAM Type:

: This registry is a mirror for SAM Types containing the subset of allocations used by DRIP Authentication Messages. Future additions MUST be done through ASTM's designated registrar which at the time of publication of this RFC is ICAO {{ASTM-Remote-ID}}. Additions for DRIP will be coordinated by IANA and the ASTM designated registrar before final publication as Standards Track RFCs. The following values have been allocated to the IETF and are defined here:

| SAM Type   | Name          | Description                           |
| ---------- | ------------- | ------------------------------------- |
| 0x01       | DRIP Link     | Format to hold Broadcast Endorsements |
| 0x02       | DRIP Wrapper  | Authenticate full ASTM Messages       |
| 0x03       | DRIP Manifest | Authenticate hashes of ASTM Messages  |
| 0x04       | DRIP Frame    | Format for future DRIP authentication |
{: title="DRIP SAM Types"}

DRIP Frame Type:

: This 8-bit valued registry is for Frame Types in DRIP Frame Authentication Messages. Future additions to this registry are to be made through Expert Review (Section 4.5 of {{RFC8126}}) for the values of 0x01 to 0x9F and First Come, First Served (Section 4.4 of {{RFC8126}}) for values 0xA0 to 0xEF. The following values are defined:

| Frame Type   | Name         | Description                        |
| ------------ | ------------ | ---------------------------------- |
| 0x00         | Reserved     | Reserved                           |
| 0x01 - 0x9F  | Reserved     | Reserved: Expert Review            |
| 0xA0 - 0xEF  | Reserved     | Reserved: First Come, First Served |
| 0xF0 - 0xFF  | Experimental | Experimental Use                   |
{: title="DRIP Frame Types"}

Criteria that should be applied by the designated experts includes determining whether the proposed registration duplicates existing functionality and whether the registration description is clear and fits the purpose of this registry.

Registration requests MUST be sent to <drip-reg-review@ietf.org> and be evaluated within a three-week review period on the advice of one or more designated experts. Within that review period, the designated experts will either approve or deny the registration request, and communicate their decision to the review list and IANA. Denials should include an explanation and, if applicable, suggestions to successfully register the DRIP Frame Type.

Registration requests that are undetermined for a period longer than 28 days can be brought to the IESG's attention for resolution.

# Security Considerations

## Replay Attacks

DRIP Link messages are static in nature. These DRIP Link messages can easily be replayed by an attacker who has copied them from previous broadcasts.

If an attacker (who is smart and spoofs more than just the UAS ID/data payloads) willingly replays a DRIP Link message, they have in principle actually helped by ensuring the DRIP Link is sent more frequently and be received by potential Observers.

The primary mitigation is that the UA is REQUIRED to send more than DRIP Link messages, specifically the Manifest and/or Wrapper messages that sign over changing data ASTM Messages (e.g., Location/Vector Messages) using the DET private key. A UA sending these messages then actually signing these and other messages using the DET key provides the Observer with data that proves real-time signing. A UA that does not either run DRIP themselves or does not have possession of the same private key, would be clearly exposed upon signature verification.

## VNA Timestamp Offsets for DRIP Authentication Formats

Note the discussion of VNA Timestamp offsets here is in the context of the DRIP Wrapper ({{drip-wrapper}}), DRIP Manifest ({{drip-manifest}}), and DRIP Frame ({{drip-frame}}). For DRIP Link ({{drip-link}}) these offsets are set by the DIME and have their own set of considerations in {{drip-registries}}.

The offset of the `VNA Timestamp by UA` is one that needs careful consideration for any implementation. The offset should be shorter than any given flight duration (typically less than an hour) but be long enough to be received and processed by Observers (larger than a few seconds). It is recommended that 3-5 minutes should be sufficient to serve this purpose in any scenario, but is not limited by design.

## DNS Security in DRIP {#dns-security}

As stated in {{protocol-desc}} specification of particular DNS security options, transports, etc. is outside the scope of this document. {{drip-registries}} is the main specification for DNS operations in DRIP and as such will define the use of best common practices for security (such as {{RFC9364}}).

# Acknowledgments

- Ryan Quigley and James Mussi of AX Enterprize, LLC for early prototyping to find holes in the draft specifications.
- Soren Friis for pointing out that Wi-Fi implementations would not always give access to the MAC Address, originally used in calculation of the hashes for DRIP Manifest. Also, for confirming that Message Packs (0xF) can only carry up to 9 ASTM frames worth of data (9 Authentication pages).
- Thanks to the following reviewers:
  - Rick Salz (secdir)
  - Matt Joras (genart)
  - Di Ma (dnsdir)
  - Gorry Fairhurst (tsvart)

--- back

# Authentication States {#auth-state-diagrams}

ASTM Authentication has only three states: None, Invalid, and Valid. This is because, under ASTM, the authentication is done by an external service hosted somewhere on the Internet so it is assumed an authoritative response will always be returned. This classification becomes more complex in DRIP with the support of "offline" scenarios where a receiver does not have Internet connectivity. With the use of asymmetric cryptography this means that the public key (PK) must somehow be obtained. {{drip-registries}} gets more into detail how these keys are stored on DNS and one use of DRIP Authentication messages is to send PK's over Broadcast RID.

There are a few keys of interest: the PK of the UA and the PK's of relevant DIMEs. This document describes how to send the PK of the UA over the Broadcast RID messages. The key of DIMEs are sent over Broadcast RID using the same mechanisms (see {{drip-link}} and {{drip-recommendations}}) but MAY be sent at a far lower rate due to potential operational constraints (such as saturation of limited bandwidth). As such, there are scenarios where part of the key-chain may be unavailable at the moment a full Authentication Message is received and processed.

The intent of this informative appendix is to give a recommended way to classify these various states and convey it to the user through colors and state names/text. These states can apply to either a single authentication message, a DET (and its associated public key), and/or a sender.

The table below lays out the recommended colors to associate with state and a brief description of each.

| State        | Color  | Details                                                         |
| ------------ | ------ | --------------------------------------------------------------- |
| None         | Black  | No Authentication being received (as yet)                       |
| Partial      | Gray   | Authentication being received but missing pages                 |
| Unsupported  | Brown  | Authentication Type/SAM Type of received message not supported  |
| Unverifiable | Yellow | Data needed for signature verification is missing               |
| Verified     | Green  | Valid signature verification and content validation             |
| Trusted      | Blue   | evidence of Verified and DIME is marked as only registering DETs for trusted entities |
| Unverified   | Red    | Invalid signature verification or content validation            |
| Questionable | Orange | evidence of both Verified & Unverified for the same claimed sender |
| Conflicting  | Purple | evidence of both Trusted & Unverified for the same claimed sender |
{: title="Authentication State Names, Colors & Descriptions"}

## None: Black {#black}

The default state where no authentication information has yet to be received.

## Partial: Gray {#gray}

A pending state where authentication pages are being received but a full authentication message has yet to be compiled.

## Unsupported: Brown {#brown}

A state wherein authentication data is being or has been received, but cannot be used, as the Authentication Type or SAM Type is not supported by the receiver.

## Unverifiable: Yellow {#yellow}

A pending state where a full authentication message has been received but other information, such as public keys to verify signatures, is missing.

## Verified: Green {#green}

A state where all authentication messages that have been received, up to that point from that claimed sender, pass signature verification and the requirement of {{trust-assessment}} has been met.

## Trusted: Blue {#blue}

A state where all authentication messages that have been received, up to that point, from that claimed sender, have passed signature verification, the requirement of {{trust-assessment}} has been met, and the public key of the sending UA is marked as trusted.

The sending UA key will have been marked as trusted if the relevant DIMEs only register DETs (of subordinate DIMEs, UAS operators, and UA) that have been vetted as per their published registration policies, and those DIMEs have been marked, by the owner (individual or organizational) of the receiver, as per that owner's policy, as trusted to register DETs only for trusted parties.

## Questionable: Orange {#orange}

A state where there is a mix of authentication messages received that are Verified ({{green}}) and Unverified ({{red}}).

Transition to this state is from Verified if a subsequent message fails verification so would have otherwise been marked Unverified, or from Unverified if a subsequent message passes verification or validation so would otherwise have been marked Verified, or from either of those state upon mixed results on the requirement of {{trust-assessment}}.

## Unverified: Red {#red}

A state where all authentication messages that have been received, up to that point, from that claimed sender, failed signature verification or the requirement of {{trust-assessment}}.

## Conflicting: Purple {#purple}

A state where there is a mix of authentication messages received that are Trusted ({{blue}}) and Unverified ({{red}}) and the public key of the aircraft is marked as trusted.

Transition to this state is from Trusted if a subsequent message fails verification so would have otherwise been marked Unverified, or from Unverified if a subsequent message passes verification or validation and policy checks so would otherwise have been marked Trusted, or from either of those state upon mixed results on the requirement of {{trust-assessment}}.

# Operational Recommendation Analysis {#operational-proof}

The recommendations found in {{operational-recommendations}} may seem heavy handed and specific. This informative appendix lays out the math and assumptions made to come to the recommendations listed there as well as an example.

In many jurisdictions, the required ASTM Messages to be transmitted every second are: Basic ID (0x1), Location (0x2), and System (0x4). Typical implementations will most likely send at a higher rate (2x sets per cycle) resulting in 6 frames sent per cycle. Transmitting this set of message more than once a second is not discouraged but awareness is needed to avoid congesting the RF spectrum, causing further issues.

> Informational Note: In Europe, the Operator ID Message (0x5) is also required. In Japan, two Basic ID (0x0), Location (0x1), and Authentication (0x2) are required. Self ID (0x3) is optional but can carry Emergency Status information.

## Page Counts vs Frame Counts

There are two formulas to determine the number of Authentication Pages required, one for Wrapper:

~~~~
<CODE BEGINS>

wrapper_struct_size = 89 + (25 * num_astm_messages)
wrapper_page_count = ceiling((wrapper_struct_size - 17) / 23) + 1

<CODE ENDS>
~~~~

and one for Manifest:

~~~~
<CODE BEGINS>

manifest_struct_size = 89 + (8 * (num_astm_hashes + 3))
manifest_page_count = ceiling((manifest_struct_size - 17) / 23) + 1

<CODE ENDS>
~~~~

A similar formula can be applied to Link as they are of fixed size:

~~~~
<CODE BEGINS>

link_page_count = ceiling((137 - 17) / 23) + 1 = 7

<CODE ENDS>
~~~~

Comparing Wrapper and Manifest Authentication Message page counts against total frame counts we have the following:

| ASTM Messages | Wrapper (w/FEC) | Manifest (w/FEC) | ASTM Messages + Wrapper (w/FEC) | ASTM Messages + Manifest (w/FEC) |
| ------------- | --------------- | ---------------- | ------------------------------- | -------------------------------- |
| 0             | 5 (6)           | 6 (7)            | 5 (6)                           | 6 (7)                            |
| 1             | 6 (7)           | 6 (7)            | 7 (8)                           | 7 (8)                            |
| 2             | 7 (8)           | 6 (7)            | 9 (10)                          | 8 (9)                            |
| 3             | 8 (9)           | 7 (8)            | 11 (12)                         | 10 (11)                          |
| 4             | 9 (10)          | 7 (8)            | 13 (14)                         | 11 (12)                          |
| 5             | N/A             | 7 (8)            | N/A                             | 12 (13)                          |
| 6             | N/A             | 8 (9)            | N/A                             | 14 (15)                          |
| 7             | N/A             | 8 (9)            | N/A                             | 15 (16)                          |
| 8             | N/A             | 8 (9)            | N/A                             | 16 (17)                          |
| 9             | N/A             | 9 (10)           | N/A                             | 18 (19)                          |
| 10            | N/A             | 9 (10)           | N/A                             | 19 (20)                          |
| 11            | N/A             | 9 (11)           | N/A                             | 20 (22)                          |
{: #tbl-page-counts title="Page & Frame Counts"}

Link shares the same page counts as Manifest with 5 ASTM Messages.

### Special Cases

#### Zero ASTM Messages

Zero ASTM Messages in {{tbl-page-counts}} is where Extended Wrapper ({{extended-wrapper}}) without FEC is used in Message Packs. With a max of 9 "message slots" in a Message Pack an Extended Wrapper fills 5 slots, thus can authenticate up to 4 ASTM Messages co-located in the same Message Pack.

#### Eleven ASTM Messages

Eleven ASTM Messages in {{tbl-page-counts}} is where a Manifest with FEC invokes the situation mentioned in {{fec-limitations}}.

Eleven is the max number of ASTM Messages Hashes that can be supported resulting in 14 total hashes. This completely fills the `evidence` section of the structure making its total size 200 octets. This fits on exactly 9 Authentication Pages (`(201 - 17) / 23 == 8`) so when the ADL is added it is placed on the next page (Page 10). Per rule 1 in {{enc-single-page}} this means that all of Page 10 is null padded (expect the ADL octet) and FEC data fills Page 11, resulting in a plus two page count when FEC is applied.

This drives the recommendation is {{drip-manifest}} to only use up to 10 ASTM Message Hashes and not 11.

## Full Authentication Example

This example is focused on showing that 100% of ASTM Messages can be authenticated over Legacy Transports with up to 125% overhead in Authentication Pages. Extended Transports is not shown as Authentication with DRIP in that case is covered using Extended Wrapper ({{extended-wrapper}}). Two ASTM Message Packs are sent in a given cycle: one containing up to 4 ASTM Messages and an Extended Wrapper (authenticating the pack) and one containing a Link message with a Broadcast Endorsement and up to two other ASTM Messages.

This example transmit scheme covers and meets every known regulatory case enabling manufacturers to use the same firmware worldwide.

~~~~
+------------------------------------------------------+
|                      Frame Slots                     |
| 00 - 04           | 05 - 07       | 08 - 16 | 17     |
+-------------------+---------------+---------+--------+
| {A|B|C|D},V,S,I,O | {A|B|C|D},V,S | M[0,8]  | L/W[0] |
+-------------------+---------------+---------+--------+
| {A|B|C|D},V,S,I,O | {A|B|C|D},V,S | M[0,8]  | L/W[1] |
+-------------------+---------------+---------+--------+
| {A|B|C|D},V,S,I,O | {A|B|C|D},V,S | M[0,8]  | L/W[2] |
+-------------------+---------------+---------+--------+
| {A|B|C|D},V,S,I,O | {A|B|C|D},V,S | M[0,8]  | L/W[3] |
+-------------------+---------------+---------+--------+
| {A|B|C|D},V,S,I,O | {A|B|C|D},V,S | M[0,8]  | L/W[4] |
+-------------------+---------------+---------+--------+
| {A|B|C|D},V,S,I,O | {A|B|C|D},V,S | M[0,8]  | L/W[5] |
+-------------------+---------------+---------+--------+
| {A|B|C|D},V,S,I,O | {A|B|C|D},V,S | M[0,8]  | L/W[6] |
+-------------------+---------------+---------+--------+
| {A|B|C|D},V,S,I,O | {A|B|C|D},V,S | M[0,8]  | L/W[7] |
+-------------------+---------------+---------+--------+

A = Basic ID Message (0x0) ID Type 1
B = Basic ID Message (0x0) ID Type 2
C = Basic ID Message (0x0) ID Type 3
D = Basic ID Message (0x0) ID Type 4
V = Location/Vector Message (0x1)
I = Self ID Message (0x3)
S = System Message (0x4)
O = Operator ID Message (0x5)

L[y,z] = DRIP Link Authentication Message (0x2)
W[y,z] = DRIP Wrapper Authentication Message (0x2)
M[y,z] = DRIP Manifest Authentication Message (0x2)
  y = Start Page
  z = End Page

# = Empty Frame Slot
* = Message in DRIP Manifest Authentication Message
~~~~
{:fig #max-schedule-fig title="Full Authenticated Legacy Transport Transmit Schedule Example"}

Every common required message (Basic ID, Location and System) is sent twice plus Operator ID and Self ID in a single second. The Manifest is over all messages (8) in slots `00 - 04` and `05 - 07`.

In two seconds either a Link or Wrapper are sent. The content and order of Links and Wrappers runs as follows:

~~~~
Link: HDA on UA
Link: RAA on HDA
Link: HDA on UA
Link: Apex on RAA
Link: HDA on UA
Link: RAA on HDA
Link: HDA on UA
Wrapper: Location (0x1), System (0x4)
Link: HDA on UA
Link: RAA on HDA
Link: HDA on UA
Link: Apex on RAA
Link: HDA on UA
Link: RAA on HDA
Link: HDA on UA
Wrapper: Location (0x1), System (0x4)
Link: IANA on UAS RID Apex
~~~~

With perfect receipt of all messages, in 8 seconds all messages (up to that point then all in future) are authenticated using the Manifest. Within 136 seconds the entire Broadcast Endorsement chain is received and can be validated; interspersed with 4 messages directly signed over via Wrapper.

### Raw Example

Assuming the following DET and HI:

~~~~
2001:3f:fe00:105:a29b:3ff4:2226:c04e
b5fef530d450dedb59ebafa18b00d7f5ed0ac08a81975034297bea2b00041813
~~~~

The following ASTM Messages to be sent in a single second:

~~~~
0240012001003ffe000105a29b3ff42226c04e000000000000
12000000000000000000000000000000000000000060220000
32004578616d706c652053656c662049440000000000000000
420000000000000000000100000000000000000010ea510900
52004578616d706c65204f70657261746f7220494400000000
0240012001003ffe000105a29b3ff42226c04e000000000000
12000000000000000000000000000000000000000060220000
420000000000000000000100000000000000000010ea510900
~~~~

This is Link with FEC that would be spread out over 8 seconds:

~~~~
2250078910ea510904314b8564b17e66662001003ffe000105
2251a29b3ff42226c04eb5fef530d450dedb59ebafa18b00d7
2252f5ed0ac08a81975034297bea2b000418132001003ffe00
22530105b82bf1c99d87273103fc83f6ecd9b91842f205c222
2254dd71d8e165ad18ca91daf9299a73eec850c756a7e9be46
2255f51dddfa0f09db7bfdde14eec07c7a6dd1061c1d5ace94
2256d9ad97940d280000000000000000000000000000000000
2257a03b0f7a6feb0d198167045058cfc49f73129917024d22
~~~~

This is a Wrapper with FEC that would be spread out over 8 seconds:

~~~~
2250078b10ea510902e0dd7c6560115e671200000000000000
22510000000000000000000000000060220000420000000000
2252000000000100000000000000000010ea5109002001003f
2253fe000105a29b3ff42226c04ef0ecad581a030ca790152a
22542f08df5762a463e24a742d1c530ec977bbe0d113697e2b
2255b909d6c7557bdaf1227ce86154b030daadda4a6b8474de
22569a62f6c375020826000000000000000000000000000000
2257f5e8eebcb04f8c2197526053e66c010d5d7297ff7c1fe0
~~~~

This is the Manifest with FEC sent in the same second as the original messages:

~~~~
225008b110ea510903e0dd7c6560115e670000000000000000
2251d57594875f8608b4d61dc9224ecf8b842bd4862734ed01
22522ca2e5f2b8a3e61547b81704766ba3eeb651be7eafc928
22538884e3e28a24fd5529bc2bd4862734ed012ca2e5f2b8a3
2254e61547b81704766ba3eeb62001003ffe000105a29b3ff4
22552226c04efb729846e7d110903797066fd96f49a77c5a48
2256c4c3b330be05bc4a958e9641718aaa31aeabad368386a2
22579ed2dce2769120da83edbcdc0858dd1e357755e7860317
2258e7c06a5918ea62a937391cbfe0983539de1b2e688b7c83
~~~~
